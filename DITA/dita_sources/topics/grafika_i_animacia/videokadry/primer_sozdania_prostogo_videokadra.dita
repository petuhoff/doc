<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_x5n_gv5_qf">
  <title>Пример создания простого видеокадра </title>
  <body>
    <p>В примере дается общее представление о процессе создания видеокадров в SimInTech.</p>
    <p><b>Модель</b></p>
    <p>Дана упрощенная модель, имитирующая некий измерительный комплекс, регистрирующий сигналы A, B
      и C. </p>
    <p><image href="videoframes-sample_images/image001.png" height="572" width="693"
        id="image_xls_4pv_ry"/></p>
    <p><b>Модель измерительной системы</b></p>
    <p>Диапазон измерения всех трех сигналов – от 0 до 100 единиц.</p>
    <p>В качестве имитатора неисправностей для каждого сигнала дополнительно вводится сигнал
      генерации случайных величин по закону равномерного распределения с диапазоном значений от 0 до
      1,2 единиц. Фактом неисправности измерительного канала должно считаться превышение этими
      сигналами порога в 1 единицу.</p>
    <p> </p>
    <p><b>Задача</b></p>
    <p>Задача состоит в создании набора из трех видеокадров: кадра верхнего уровня с обобщенной
      сигнализацией и двух детальных кадров. Один детальный кадр с отображением измеряемых величин,
      другой – с диагностикой измерительных каналов.</p>
    <p>Кадры должны быть организованы на основе блоков «Субмодель» и должны размещаться в одном
      проекте с моделью, однако пользователь кадров не должен иметь возможности переключиться
      куда-либо внутри проекта кроме трех указанных выше кадров.</p>
    <p>Предполагаемая структура проекта выглядит следующим образом.</p>
    <p><image href="videoframes-sample_images/image002.png" height="292" width="578"
        id="image_yls_4pv_ry"/></p>
    <p><b>Структура организации видеокадров в проекте</b></p>
    <p>Кадр верхнего уровня должен содержать обобщенную сигнализацию о превышении измеряемыми
      величинами порогов и обобщенной диагностики в виде двух световых табло: «Измерения» и
      «Диагностика».</p>
    <p>В норме оба табло должны иметь зеленый фон.</p>
    <p>Увеличение любых двух из трех измеряемых показаний более 60 единиц должно приводить к
      появлению предупредительной сигнализации – желтое табло «Измерения». </p>
    <p>Увеличение любых двух из трех показаний более 80 единиц должно приводить к появлению
      аварийной сигнализации – красное табло «Измерения». </p>
    <p>Появление сигнала неисправности в любом из трех каналов должно приводить к появлению
      аварийной диагностической сигнализации – красное табло «Диагностика».</p>
    <p>Детальный кадр с показаниями должен отображать все три измеряемых величины в виде аналоговых
      шкал и в виде цифровых значений. При превышении порогов в 60 и 80 единиц каждым сигналом
      соответсвтующая шкала должна изменять свой цвет с зеленого на желтый и на красный
      соответственно. При возникновении сигнала неисправности в каком-либо измерительном канале
      показания по данному каналу не должны отображаться.</p>
    <p>Также на кадре должна присутствовать обобщенная сигнализация по превышению порогов,
      аналогичная кадру верхнего уровня.</p>
    <p>На кадре диагностики должны отображаться три световых индикатора, по одному на каждый
      измерительный канал. При значениях сигнала неисправности >=1 индикатор соответствующего канала
      должен менять цвет с зеленого на красный.</p>
    <p>Ниже представлены эскизы видеокадров.</p>
    <p><image href="videoframes-sample_images/image003.png" height="290" width="577"
        id="image_zls_4pv_ry"/>
    </p>
    <p><image href="videoframes-sample_images/image004.png" height="290" width="577"
        id="image_ams_4pv_ry"/></p>
    <p><image href="videoframes-sample_images/image005.png" height="290" width="577"
        id="image_bms_4pv_ry"/></p>
    <p><b>Эскизы кадров</b></p>
    <p><b>Создание набора сигналов</b></p>
    <p>Для того, чтобы иметь возможность визуализировать значения, генерируемые в расчетной модели,
      нам нужно создать под хранение этих значений необходимое количество сигналов проекта. В
      случае, когда для записи, хранения и передачи расчетных величин используется база данных, и
      требуемые сигналы уже присутствуют в этой базе, данный этап может быть пропущен. В остальном
      никаких отличий между этими двумя случаями нет. </p>
    <p>Нам будет необходимо иметьсигналы для аналоговых значений, регистрируемых по каналам A, B и
      C, а также сопутствующие им сигналы, имитирующие сигнализацию неисправности измеристельного
      канала. Также нам понадобятся два обобщенных сигнала: один с информацией о превышении уставок
      для табло «Сигнализация» и один с информацией о наличии неисправноти для табло
      «Неисправность». Сигналы проекта создаются и конфигурируются в окне редактора сигналов,
      вызываемом через меню в Главном Окне: <b>«Сервис» → «Сигналы…»</b>.</p>
    <p>Перечень необходимых сигналов и их параметры приведены на рисунке ниже.</p>
    <p><image href="videoframes-sample_images/image006.png" height="387" width="782"
        id="image_cms_4pv_ry"/></p>
    <p><image href="videoframes-sample_images/image007.png" height="387" width="803"
        id="image_dms_4pv_ry"/></p>
    <p><b>Сигналы проекта</b></p>
    <p>Теперь нужно дополнить блок-схему модели блоками записи значений в сигналы проекта. Для этого
      используются блоки <image href="videoframes-sample_images/image008.png" height="36" width="37"
        id="image_ems_4pv_ry"/> «Запись в список сигналов» из вкладки «Данные» в главном окне
      проекта. </p>
    <p>Для указания сигнала, в который должно записываться, подключаемое к блоку значение, имя этого
      сигнала нужно вписать с поле свойства «Имена сигналов» (вкладка «Свойства») данного блока.
      Окно свойств блока вызывается по двойному клику ЛКМ на этом блоке.</p>
    <p><image href="videoframes-sample_images/image009.png" height="632" width="693"
        id="image_fms_4pv_ry"/></p>
    <p><b>Пример указания имени сигнала для записи расчетных значений с помощью блока «Запись в блок
        сигналов»</b></p>
    <p>В результате наша схема должна выгдядеть так.</p>
    <p><image href="videoframes-sample_images/image010.png" height="573" width="693"
        id="image_gms_4pv_ry"/></p>
    <p> </p>
    <p><b>Расчетная модель проекта с блоками для записи расчетных значений в сигналы проекта</b></p>
    <p><b>Создание структуры видеокадров</b></p>
    <p>Добавим в схемное окно редактируемого проекта четыре блока «Субмодель». В один из этих блоков
      нужно перенести расчетную модель. Это позволит лучше упорядочить содержимое нашего проекта и
      никак не повлияет на процесс расчета и доступность рассчитываемых значений и сигналов проекта.
      Для переноса модели достаточно выделить все ее элементы, включая линии связи, затем вырезать
      их из основного окна проекта, открыть блок «Субмодель» по двойному клику ЛКМ на нем и вставить
      содержимое буфера обмена в открывшуюся страницу субмодели.</p>
    <p>Затем изменим имена оставшихся трех блоков «Субмодель», которые будут выполнять роль
      видеокадров. Для этого нужно выделить один из блоков, по клику ПКМ вызвать контекстное меню и
      выбрать в нем пункт «Свойства объекта». В открывшемся окне свойств, на вкадке «Общие», в
      строке свойства «Имя / Name» нужно вписать следующие имена для субмоделей: page1, page2_1,
      page2_2. Эти имена будут использоваться, например, при организации переходов между
      видеокадрами. </p>
    <p>Также изменим фон окна для субмоделей 2_1 и 2_2 с белого на серый – свойство «Цвет фона
      субмодели / ModelColor», чтобы пользователю было проще отличить детальные кадры от основного.
      Для изменения фона основной страницы проекта можно воспользоваться свойством «Цвет фона…» в
      меню «Вид» схемного окна проекта.</p>
    <p>Кроме того, можно изменить внешний вид самих блоков «Субмодель» <image
        href="videoframes-sample_images/image011.png" height="41" width="61" id="image_hms_4pv_ry"/>
      на основной странице. Для этого нужно в поле свойства «графическое изображение / Graphics»
      кликнуть по кнопке <image href="videoframes-sample_images/image012.png" height="30" width="30"
        id="image_ims_4pv_ry"/>. Откроется окно графического редактора со вставленным по умолчанию
      растровым изображением для блока «Субмодель». Его можно выделить и удалить. А вместо него,
      например, ставить из панели примитивов текст с кратким названием блока. </p>
    <p><image href="videoframes-sample_images/image013.png" height="451" width="611"
        id="image_jms_4pv_ry"/></p>
    <p><b>Редактирование изображения для блока «Субмодель»</b></p>
    <p>При желании можно дополнить получившееся изображение в схемном окне проекта поясняющими
      статическими надписями и рисунками.</p>
    <p><image href="videoframes-sample_images/image014.png" height="458" width="788"
        id="image_kms_4pv_ry"/></p>
    <p><b>Пример оформления главной страницы проекта</b></p>
    <p><b>Кадр диагностики</b></p>
    <p>Откроем блок «page2_2». Открывшаяся страница является будущим кадром диагностики. </p>
    <p>Создадим световое табло сигнализации для измерительного канала «А». В качестве табло добавим
      из панели примитивов в страницу проекта залитый круг и через окно свойств переименуем его из
      FillCircle в diag_lampA. Цвет по умолчанию – зеленый. Дальнейшуюю логику опишем в скрипте
      данной страницы проекта. Для перехода к скрипту нужно выбрать в левой части окна вертиккальную
      вкладку «Параметры». </p>
    <p><image href="videoframes-sample_images/image015.png" height="458" width="788"
        id="image_lms_4pv_ry"/></p>
    <p><b>Световое табло для сигнализации о неисправности измерительного канала </b><b>A</b></p>
    <p>В открывшемся редакторе нужно написать следуюший скрипт.</p>
    <table id="table_mms_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry><b>if</b> diagA >=1 <b>then</b> diag_lampA.color = <b>rgbtocolor</b>(240,0,0)
                <b>else</b> diag_lampA.color = <b>rgbtocolor</b>(0,206,0);</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Таким образом, при значениях случайно изменяющегося диагностического сигнала diagA больше,
      либо равных 1 цвет заливки нашего табло будет становиться красным, в противном случае –
      зеленым.</p>
    <p>Добавим на кадр оставшиеся табло для измерительных каналов B и С и запишем для них
      аналогичные условия. </p>
    <table id="table_nms_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> diagA >=1 <b>then</b> diag_lampA.color = <b>rgbtocolor</b>(240,0,0)
                  <b>else</b> diag_lampA.color = <b>rgbtocolor</b>(0,206,0);</p>
              <p><b>if</b> diagB >=1 <b>then</b> diag_lampB.color = <b>rgbtocolor</b>(240,0,0)
                  <b>else</b> diag_lampB.color = <b>rgbtocolor</b>(0,206,0);</p>
              <p><b>if</b> diagC >=1 <b>then</b> diag_lampC.color = <b>rgbtocolor</b>(240,0,0)
                  <b>else</b> diag_lampC.color = <b>rgbtocolor</b>(0,206,0);</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Также запишем расчет обобщенного сигнала неисправности для будущего табло обобщенной
      диагностики на кадре page1.</p>
    <table id="table_oms_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry><b>if</b> (diagA>=1) <b>OR</b> (diagB>=1) <b>OR</b> (diagC>=1) <b>then</b>
              diag_res = 2 <b>else</b> diag_res = 0;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Проверить работу табло можно перейдя обратно во вкладку «Схема» и запустив расчет. Для этого
      переведем схемное окно из режима «Редактирование» в режим «Индикация» по кнопке <image
        href="videoframes-sample_images/image016.png" height="25" width="25" id="image_pms_4pv_ry"/>
      / <image href="videoframes-sample_images/image017.png" height="25" width="25"
        id="image_qms_4pv_ry"/> на панели инструментов схемного окна и запустим расчет проекта по
      горячей клавише [F9] или по кнопке <image href="videoframes-sample_images/image018.png"
        height="26" width="26" id="image_rms_4pv_ry"/> на панели инструментов главного окна. Для
      продолжения работы расчет нужно остановить сочетанием горячих клавиш [Shift]+[F9] или по
      кнопке <image href="videoframes-sample_images/image019.png" height="25" width="25"
        id="image_sms_4pv_ry"/> на панели инструментов главного окна. </p>
    <p>Теперь можно дополнить данный кадр текстом с названием и некоторыми статическими
      изображениями.</p>
    <p><image href="videoframes-sample_images/image020.png" height="416" width="541"
        id="image_tms_4pv_ry"/></p>
    <p><b>Вид кадра </b><b>page</b><b>2_2</b></p>
    <p><b>Кадр измеряемых показаний</b></p>
    <p>Данный кадр должен отображать значения сигналов signalA, signalB и signalC в аналоговом и
      цифровом представлениях. Кроме того, значения сигналов должны отображаться только в том
      случае, если нет факта неисправности соответствующего канала. Также на этом кадре должна
      отображаться обобщенная сигнализация об одновременном переходе порогов в 60 и в 80 единиц
      более чем в одном канале.</p>
    <p>Для отображения значений сигналов в аналоговом формате воспользуемся готовым шкальным
      примитивом «Линейный прибор» из панели примитивов.</p>
    <p><image href="videoframes-sample_images/image021.png" height="377" width="788"
        id="image_ums_4pv_ry"/></p>
    <p><b>Добавление примитива «Линейный прибор»</b></p>
    <p>В свойствах данного примитива нужно установить следующие значения основных свойств:</p>
    <ul id="ul_vms_4pv_ry">
      <li>- Имя объекта «BarA»;</li>
      <li>- Нижний предел «0» (по умолчанию);</li>
      <li>- Верхний предел «100» (по умолчанию);</li>
      <li>- Показывать шкалу «Нет».</li>
    </ul>
    <p>Примитив «Линейный прибор» имеет шкалу с настраиваемыми рисками и числовыми подписями, но его
      незльзя настроить таким образом, чтобы шкала полностью перекрывалась рисками. Поэтому мы
      отключим отображение шкалы в данном примитиве (последнее изменявшееся выше свойство) и возьмем
      шкалу от другого примитива «Линейная шкала».</p>
    <p><image href="videoframes-sample_images/image022.png" height="377" width="788"
        id="image_wms_4pv_ry"/></p>
    <p><b>Добавление примитива «Линейная шкала»</b></p>
    <p>Основные настройки для данного примитива:</p>
    <ul id="ul_xms_4pv_ry">
      <li>- Штрихи наоборот «Да»;</li>
      <li>- Нижний предел «0» (по умолчанию);</li>
      <li>- Верхний предел «100» (по умолчанию);</li>
      <li>- Координаты точек – см. ниже.</li>
    </ul>
    <p>Для того, чтобы значения, отображаемые линейным прибором правильно согласовались на
      присоединенной шкале нужно совместить два примитива так, чтобы совпадали их левая и правая
      границы. Этого можно достичь копированием содержимого свойств «Координаты точек» и «Ширина» из
      одного примитива в другой либо простыми манипуляциями мышью в схемном окне проекта с
      включенной привязкой к сетке (меню схемного окна: <b>«Вид→Привязка»</b>). Для отладки можно
      задать в свойстве «Значение / Value» линейного прибора какое-нибудь значение.</p>
    <p><image href="videoframes-sample_images/image023.png" height="138" width="438"
        id="image_yms_4pv_ry"/></p>
    <p><b>Пример совмещения шкалы и линейного прибора с отключенной шкалой</b></p>
    <p>Теперь нужно связать сигнал signalA с линейным прибором. Это можно сделать различными
      способами. В данном случае мы воспользуемся записью в скрипте данной страницы проекта.</p>
    <table id="table_zms_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>barA.value = signalA;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Работу кадра, как и ранее, можно проверить запустив расчет.</p>
    <p>Для учета неисправности канала придется ввести промежуточную переменную signalAd, которая
      будет равна значению сигнала при отсутствии неисправности и «-1» при ее наличии. Таким образом
      не будет отображаться шкала и результирующее значение не будет вносить вклад при оценке
      количества сигналов, превысивших пороги.</p>
    <table id="table_ans_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> diagA >=1 <b>then</b> signalAd=-1 <b>else</b> signalAd = signalA;</p>
              <p>barA.value = signalAd;</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Также мы должны закрашивать шкалу различными цветами (свойство barcolor примитива barA) по
      достижении порогов в 60 и 80 единиц. Для этого скрипт нужно дополнить следующим кодом.</p>
    <table id="table_bns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> signalA>=80</p>
              <p><b>then</b> barA.barcolor = <b>rgbtocolor</b>(240,0,0) //красный</p>
              <p><b>else </b></p>
              <p><b>if</b> signalA>=60 </p>
              <p><b>then</b> barA.barcolor = <b>rgbtocolor</b>(240,240,0) //желтый</p>
              <p><b>else</b> barA.barcolor = <b>rgbtocolor</b>(0,128,128); //цвет по умолчанию</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>В данном случае можно использовать исходный сигнал, т.к. здесь определяется только цвет
      шкалы, а ее видимость определена ранее, поэтому нет необходимости применять какую-либо
      уникальную расцветку шкалы для случая неисправности измерительного канала.</p>
    <p>Для оставшихся измерительных каналов B и C скопируем этот виртуальный прибор, переименуем
      копии линейных приборов в BarB и BarC соответсвенно и добавим строки связи линейных приборов с
      сигналами в скрипт кадра.</p>
    <table id="table_cns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> diagA >=1 <b>then</b> signalAd=-1 <b>else</b> signalAd = signalA; </p>
              <p><b>if</b> diagB >=1 <b>then</b> signalBd=-1 <b>else</b> signalBd = signalB;</p>
              <p><b>if</b> diagC >=1 <b>then</b> signalCd=-1 <b>else</b> signalCd = signalC;</p>
              <p> </p>
              <p>barA.value = signalAd;</p>
              <p>barB.value = signalBd;</p>
              <p>barC.value = signalCd;</p>
              <p> </p>
              <p><b>if</b> signalA>=80</p>
              <p><b>then</b> barA.barcolor = <b>rgbtocolor</b>(240,0,0) //красный</p>
              <p><b>else </b></p>
              <p><b>if</b> signalA>=60 </p>
              <p><b>then</b> barA.barcolor = <b>rgbtocolor</b>(240,240,0) //желтый</p>
              <p><b>else</b> barA.barcolor = <b>rgbtocolor</b>(0,128,128); //цвет по умолчанию</p>
              <p> </p>
              <p><b>if</b> signalB>=80</p>
              <p><b>then</b> barB.barcolor = <b>rgbtocolor</b>(240,0,0) //красный</p>
              <p><b>else </b></p>
              <p><b>if</b> signalB>=60 </p>
              <p><b>then</b> barB.barcolor = <b>rgbtocolor</b>(240,240,0) //желтый</p>
              <p><b>else</b> barB.barcolor = <b>rgbtocolor</b>(0,128,128); //цвет по умолчанию</p>
              <p> </p>
              <p><b>if</b> signalC>=80</p>
              <p><b>then</b> barC.barcolor = <b>rgbtocolor</b>(240,0,0) //красный</p>
              <p><b>else </b></p>
              <p><b>if</b> signalC>=60 </p>
              <p><b>then</b> barC.barcolor = <b>rgbtocolor</b>(240,240,0) //желтый</p>
              <p><b>else</b> barC.barcolor = <b>rgbtocolor</b>(0,128,128); //цвет по умолчанию</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Как видно, получившиеся виртуальные приборы состоят из нескольких графических примитивов, что
      затрудняет манипуляции с ним. Поэтому для отображения значений сигналов в цифровом формате мы
      воспользуемся графическими контейнерами. Для этого добавим в схемное окно примитив «Пустая
      группа».</p>
    <p><image href="videoframes-sample_images/image024.png" height="436" width="788"
        id="image_dns_4pv_ry"/></p>
    <p><b>Добавление примитива «Пустая группа»</b></p>
    <p>Сразу изменим фон примитива на черный. Для этого надо вызвать окно свойств группы, кликнув
      ПКМ на ее изображении и выбрав пункт контекстного меню «Свойства объекта». Цвет фона группы
      выбирается в одноименном свойстве «Цвет / Color». Название группы нужно изменить на «GroupA».
      Затем нужно закрыть окно свойств группы по кнопке «Оk». </p>
    <p>Далее приступим к редактированию содержимого группы. Для этого нужно дважды кликнуть ЛКМ на
      изображении группы – откроется окно графического редактора. Для отображения значений сигналов
      в цифровом формате воспользуемся примитивом «Текст». </p>
    <p><image href="videoframes-sample_images/image025.png" height="654" width="611"
        id="image_ens_4pv_ry"/></p>
    <p><b>Окно редактирования содержимого графической группы с добавленным примитивом
      «Текст»</b></p>
    <p>Для редактирования свойств примитива «Текст» нужно вызвать контекстное меню по лику ПКМ на
      его изображении и выбрать пункт «Свойства объекта». Нужно установить следующие ключевые
      свойства данного примитива:</p>
    <ul id="ul_fns_4pv_ry">
      <li>- Имя объекта «Textlabel» (по умолчанию);</li>
      <li>- Видимость при выполнении «Да» (по умолчанию);</li>
      <li>- Текст «»;</li>
      <li>- Способ показа цифр «Показывать справа»;</li>
      <li>- Прозрачный фон «Да» (по умолчанию);</li>
      <li>- Положение точки вставки «Справа»;</li>
      <li>- Стиль выравнивания «Справа»;</li>
      <li>- Шрифт – см. ниже.</li>
    </ul>
    <p>Для настройки цвета текста нужно открыть настройки шрифта кликом по кнопке <image
        href="videoframes-sample_images/image012.png" height="30" width="30" id="image_gns_4pv_ry"/>
      в поле свойства «Шрифт». Откроется соответствующее окно, в котором нужно выбрать белый
      цвет.</p>
    <p><image href="videoframes-sample_images/image026.png" height="325" width="429"
        id="image_hns_4pv_ry"/></p>
    <p><b>Выбор цвета текста для примитива «Текст»</b></p>
    <p>Затем нужно закрыть все окна настройки примитива «Текст», сместить сам примитив в правую
      часть окна графического редактора и сузить окно редактора так, чтобы было достаточно места для
      отображения будущих значений. Также нужно добавить в центр нашей группы ещё один текстовый
      примитив с текстом «XXXX», который будет отображаться при появлении неисправности. Свойства
      для данного примитива:</p>
    <ul id="ul_ins_4pv_ry">
      <li>- Имя объекта «Textlabel1» (по умолчанию);</li>
      <li>- Видимость при выполнении «Нет»;</li>
      <li>- Текст «XXXX»;</li>
      <li>- Способ показа цифр «Не показывать» (по умолчанию);</li>
      <li>- Прозрачный фон «Да» (по умолчанию);</li>
      <li>- Положение точки вставки «По центру»;</li>
      <li>- Стиль выравнивания «По центру»;</li>
      <li>- Шрифт – пурпурный цвет.</li>
    </ul>
    <p><image href="videoframes-sample_images/image027.png" height="257" width="612"
        id="image_jns_4pv_ry"/></p>
    <p><b>Вид содержимого группы</b></p>
    <p>Для возможности передавать значения сигналов в свойства графических примитивов, находящихся
      внутри группы нужно создать в этой группе глобальные (общие) свойства. Эти свойства с одной
      стороны, будут входить в перечень свойств графической группы, доступных в схемном окне проекта
      и смогут принимать значения сигналов проекта, а с другой стороны, будут связываться внутри
      группы со свойствами графических примитивов. Для добавления глобальных свойств используется
      соответствующий редактор, вызываемый из меню окна графического редактора при редактировании
      соответствующей группы: <b>«ГР: Сервис→Глобальные свойства»</b>. Поскольку для отображения мы
      будем использовать переменную signalAd и подобные ей, в значениях которых уже закодирован факт
      неисправности измерительного канала, то нам нужно получить только это значение, для которого
      достаточно одного глобального свойства. Параметры добавляемого глобального свойства приведены
      на скриншоте ниже.</p>
    <p><image href="videoframes-sample_images/image028.png" height="265" width="641"
        id="image_kns_4pv_ry"/></p>
    <p><b>Параметры глобального свойства для отображения измеряемых значений в цифровом
      формате</b></p>
    <p>После добавления глобального свойства нужно описать связи и логику отображения внутри
      редактируемой группы.н</p>
    <p>Связь между глобальным свойством val и свойством values текстового примитива TextLabel можно
      задать с помощью редактора связей: <b>«ГР: Сервис→Связи…»</b>.</p>
    <p>В левой части окна во вкладке «Объект» нужно найти свойство «Values» (объект «TextLabel» при
      этом должен быть выделен) и перетащить его в колонку «Приемник» в правой части окна. Затем
      нужно открыть вкладку «Общее свойство» и перетащить свойство «val» в колонку «Источник»
      напротив заполенной ранее ячейки.</p>
    <p><image href="videoframes-sample_images/image029.png" height="429" width="580"
        id="image_lns_4pv_ry"/></p>
    <p><b>Окно редактора связей</b></p>
    <p>Остальную логику отображения внутри группы нужно описать с помощью скрипта. Для этого нужно
      открыть соответствующий редактор, вызвав его из меню: <b>«Сервис» → «Скрипт»</b>. Нужно
      написать код, который будет изменять значения свойства «Visible» двух наших текстовых
      примитивов на противоположные при изменении значения val на «-1» и обратно. </p>
    <p><image href="videoframes-sample_images/image030.png" height="520" width="656"
        id="image_mns_4pv_ry"/></p>
    <p><b>Окно редактирования скриптов </b></p>
    <p>Предлагаемый код скрипта приведен ниже.</p>
    <table id="table_nns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> val &lt; 0 </p>
              <p><b>then </b></p>
              <p><b>begin</b></p>
              <p>textlabel.visible = 0</p>
              <p>textlabel1.visible = 1</p>
              <p><b>end</b></p>
              <p><b>else</b></p>
              <p><b>begin</b></p>
              <p>textlabel.visible = 1</p>
              <p>textlabel1.visible = 0</p>
              <p><b>end</b></p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Теперь можно закрыть все окна, связанные с графическим редактором и окно самого графического
      редактора с подтверждением вносимых изменений.</p>
    <p><image href="videoframes-sample_images/image031.png" height="666" width="644"
        id="image_ons_4pv_ry"/></p>
    <p><b>Окно свойств группы «GroupA» с глобальным свойством «val»</b></p>
    <p>Новый виртуальный показывающий прибор готов, но ещё не связан с показаниями, которые он
      должен отображать. Дополним скрипт текущей страницы проекта следующим кодом:</p>
    <table id="table_pns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>groupA.val = signalAd;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Теперь можно проверить работу показывающего прибора, запустив расчет. </p>
    <p><image href="videoframes-sample_images/image032.png" height="129" width="532"
        id="image_qns_4pv_ry"/>
    </p>
    <p><b>Пример внешнеого вида шкального и цифрового приборов</b></p>
    <p>После успешной отладки нужно сделать копии группы «GroupA» и переименовать копии в «GroupB» и
      «GroupC». Также нужно внести соответствующие дополнения в скрипт.</p>
    <table id="table_rns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p>groupA.val = signalAd;</p>
              <p>groupB.val = signalBd;</p>
              <p>groupC.val = signalCd;</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>По условиям примера на текущем кадре должны также отображаться факты одновременного
      превышения в двух и более каналах уставки в 60 единиц и аналогичная сигнализации для уставки в
      80 единиц. </p>
    <p>Создадим два табло на основе примитивов FillCircle и переименуем их соответственно в
      «lamp_yell» и «lamp_red». Для организации засветки каждого из этих табло дополним скрипт
      следующим кодом:</p>
    <table id="table_sns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> ((signalAd>=80) <b>AND</b> (signalBd>=80)) <b>OR</b> ((signalAd>=80)
                  <b>AND</b> (signalCd>=80)) <b>OR</b> ((signalBd>=80) <b>AND</b>
                (signalCd>=80))</p>
              <p><b>then</b> mes_res = 2 </p>
              <p><b>else </b></p>
              <p><b>if</b> ((signalAd>=60) <b>AND</b> (signalBd>=60)) <b>OR</b> ((signalAd>=60)
                  <b>AND</b> (signalCd>=60)) <b>OR</b> ((signalBd>=60) <b>AND</b> (signalCd>=60)) </p>
              <p><b>then</b> mes_res = 1 </p>
              <p><b>else</b> mes_res = 0;</p>
              <p> </p>
              <p><b>if</b> mes_res >= 1 </p>
              <p><b>then</b> lamp_yell.color = rgbtocolor(240,240,0) //желтый</p>
              <p><b>else</b> lamp_yell.color = rgbtocolor(128,128,0); //приглушенный желтый</p>
              <p><b>if</b> mes_res = 2 </p>
              <p><b>then</b> lamp_red.color = rgbtocolor(240,0,0) //красный</p>
              <p><b>else</b> lamp_red.color = rgbtocolor(108,0,0); //приглушенный красный</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Получившийся кадр можно дополнить пояснящими подписями.</p>
    <p><image href="videoframes-sample_images/image033.png" height="453" width="571"
        id="image_tns_4pv_ry"/></p>
    <p><b>Вид кадра </b><b>page</b><b>2_1</b></p>
    <p><b>Кадр верхнего уровня</b></p>
    <p>Перейдем в субмодель «page1». Данная страница проекта должна стать кадром с обобщенной
      сигнализацией. Для этого мы создадим еще один виртуальный показывающий прибор на основе
      графической группы. Для этого добавим в текущую страницу проекта примтив «пустая группа» и
      откроем его для редактирования двойным кликом ЛКМ. В октрывшемся окне графического редакторе
      добавим графический примитив «залитый прямоугольник» и примтив «Текст».</p>
    <p><image href="videoframes-sample_images/image034.png" height="654" width="611"
        id="image_uns_4pv_ry"/></p>
    <p><b>Вид редактируемой группы</b></p>
    <p>Для текстового примтива следует установить следующие свойства:</p>
    <ul id="ul_vns_4pv_ry">
      <li>- Имя «TextLabel»;</li>
      <li>- Положение точки вставки «По центру»;</li>
      <li>- Стиль выравнивания «По центру»;</li>
      <li>- Шрифт – белый цвет.</li>
    </ul>
    <p>Свойства для залитого прямоугольника:</p>
    <ul id="ul_wns_4pv_ry">
      <li>- Имя «FillRect»;</li>
      <li>- Форма – прямоугольная.</li>
    </ul>
    <p>Путем последовательных итераций с уменьшением окна графического редактора, его закрытием и
      повторным открытием следует добиться такого размещения объектов внутри группы, чтобы
      прямоугольник занимал всю область графического редактора, но не выходил за границы графической
      группы, а текст был в центре группы.</p>
    <p><image href="videoframes-sample_images/image035.png" height="509" width="788"
        id="image_xns_4pv_ry"/></p>
    <p><b>Вид отформатированной группы в схемном окне и в графическом редакторе</b></p>
    <p>Наш виртуальный прибор должен быть расчитан на работу от одного внешнего сигнала,
      принимающего значения «0» - норма, «1» - предупредительная сигнализация и «2» - аварийная
      сигнализация. При этом должен меняться как цвет фонового прямоугольника, так и текст надписи.
      Для передачи значений внешнего сигнала нужно создать два глобальных свойства: первое для
      засветки табло и выбора варианта текста, а второе для вставки своего варианта текста для
      аварийного значения сигнала. Параметры глобальных свойств приведены на скриншоте ниже.</p>
    <p><image href="videoframes-sample_images/image036.png" height="265" width="641"
        id="image_yns_4pv_ry"/></p>
    <p><b>Глобальные свойства для табло обобщенной сигнализации</b></p>
    <p>Описание связей внутри группы и логику работы мы реализуем в скрипте группы. </p>
    <table id="table_zns_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p><b>if</b> (switch = 0) </p>
              <p><b>then </b></p>
              <p><b>begin</b></p>
              <p>fillrect.color = <b>rgbtocolor</b>(0, 128, 0) //зеленый</p>
              <p>textlabel.text = "НОРМА"</p>
              <p><b>end</b></p>
              <p><b>else</b><b>if</b> (switch = 1)</p>
              <p><b>then </b></p>
              <p><b>begin</b></p>
              <p>fillrect.color = <b>rgbtocolor</b>(255, 235, 0) //желтый</p>
              <p>textlabel.text = "ПС"</p>
              <p><b>end</b></p>
              <p><b>else if</b> (switch = 2) </p>
              <p><b>then</b></p>
              <p><b>begin</b></p>
              <p>fillrect.color = <b>rgbtocolor</b>(220, 0, 0) //красный</p>
              <p>textlabel.text = alarm_text</p>
              <p><b>end;</b></p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Теперь можно закончить редактирование группы и описать связи в схемном окне проекта. В нашем
      случае это можно сделать с помощью редактора связей. Редактор связей на уровне схемного окна
      проекта можно вызвать из меню Главного Окна: <b>«Сервис» → «Связи…»</b>.</p>
    <p><image href="videoframes-sample_images/image037.png" height="429" width="580"
        id="image_a4s_4pv_ry"/></p>
    <p><b>Связи для двух табло обобщенной сигнализации на кадре page1</b></p>
    <p>Кадр можно дополнить поясняющими подписями.</p>
    <p><image href="videoframes-sample_images/image038.png" height="392" width="796"
        id="image_b4s_4pv_ry"/></p>
    <p><b>Вид кадра обобщенной сигнализации page1</b></p>
    <p><b>Навигация</b></p>
    <p>По условию задачи нам нужно организовать переключение между кадрами проекта так, как это
      показано на схеме ниже.</p>
    <p><image href="videoframes-sample_images/image039.png" height="218" width="437"
        id="image_c4s_4pv_ry"/></p>
    <p><b>Навигация в создаваемом проекте</b></p>
    <p>Для осуществления переходов достаточно добавить на кадры любые логические блоки или
      графические примитивы и назначить им в свойстве «Ссылка» переключение на соответсвующую
      страницу проекта. Воспользуемся для этих целей графическим примитивом «Набор изображений /
      ImageList».</p>
    <p><image href="videoframes-sample_images/image040.png" height="509" width="788"
        id="image_d4s_4pv_ry"/></p>
    <p><b>Вид примитива «Набор изображений / ImageList» по умолчанию</b></p>
    <p>Данный примитив примечателен тем, что в качестве отображаемого изображения ему можно указать
      набор картинок одинакового размера, объединенных в одном файле, а также указать число этих
      картинок. Затем пользователь может, указывая индекс требуемой картинки, выбирать то
      изображение, которое должно отображаться в примитиве в данный момент. </p>
    <p>В первую очередь добавим кнопки перехода в кадр верхнего уровня. Для этого добавим в страницу
      проекта page1 один графический примитив «Набор изображений / ImageList» и зададим ему слудющие
      свойства:</p>
    <ul id="ul_e4s_4pv_ry">
      <li>- Имя «ImageList» (по умолчанию);</li>
      <li>- Растровое изображение – exitarrows.png (см. ниже);</li>
      <li>- Прозрачность «Да» (по умолчанию);</li>
      <li>- Прозрачный цвет – белый (по умолчанию);</li>
      <li>- Число кадров «2» (по умолчанию);</li>
      <li>- Индекс кадра «0» (по умолчанию).</li>
    </ul>
    <p>В качестве изображения для данного примитива укажем файл exitarrows.png. </p>
    <p><image href="videoframes-sample_images/image041.png" height="150" width="255"
        id="image_f4s_4pv_ry"/></p>
    <p><b>Изображение для кнопки перехода между кадрами</b></p>
    <p>Данное изображение достаточно простое и может быть изготовлено самостоятельно. Главным
      условием корректного отображения картинок в примитиве SimInTech является равный размер
      «кадров», поскольку именно так примитив автоматически поделит исходное изображение. Несмотря
      на то, что по умолчанию в форме добавления растрового изображения предлагается указать файл
      формата .bmp, можно также использовать файлы форматов .png .jpg. </p>
    <p>После добаввления изображения в страницу page1 должно получиться следующее изображение.</p>
    <p><image href="videoframes-sample_images/image042.png" height="478" width="796"
        id="image_g4s_4pv_ry"/></p>
    <p><b>Промежуточный вид обобщенного кадра при создании кнопки</b></p>
    <p>Поскольку данная кнопка будет использоваться для перехода на кадры более низкого уровня,
      логично перевернуть ее изображение. Это можно сделать просто переместив любой из верхних
      маркеров вниз, под нижние.</p>
    <p><image href="videoframes-sample_images/image043.png" height="478" width="796"
        id="image_h4s_4pv_ry"/>
    </p>
    <p><b>Изменение направления стрелки</b></p>
    <p>Для удобства можно увеличить размер будущей кнопки.</p>
    <p>Теперь для осуществления собственно возможности перехода нужно указать параметры ссылки для
      данного примитива. Для этого нужно в поле свойства «Ссылка» нажать кнопку <image
        href="videoframes-sample_images/image012.png" height="30" width="30" id="image_i4s_4pv_ry"/>.
      Откроется окно настройки ссылок с отображением структуры текущего проекта. Нас интересует
      раздел «Страницы проекта», подраздел «page2_1». Режим показа формы: «просто ссылка».</p>
    <p><image href="videoframes-sample_images/image044.png" height="508" width="787"
        id="image_j4s_4pv_ry"/></p>
    <p><b>Настройка ссылки для перехода на другой кадр</b></p>
    <p>Также в свойстве «Действие для вывода ссылки / InstanceMode» укажем «Щелчок левой кнопке». В
      этом случае переход на кадр page2_1 будет происходить по клику ЛКМ на изоражении
      примитива.</p>
    <p>Теперь можно скопировать полностью настроенный примитив и поместить копию под вторым табло,
      изменив в свойствах копии ссылку с page2_1 на page2_2.</p>
    <p><image href="videoframes-sample_images/image045.png" height="452" width="796"
        id="image_k4s_4pv_ry"/></p>
    <p><b>Вид обобщенного кадра с добавленными кнопками перехода на детальные кадры</b></p>
    <p>Для того, чтобы обратить внимание пользователя на интерактивность наших кнопок, мы можем
      менять изображение внутри примитива при попадани курсора мыши в границы примитива. Для этого
      нужно в скрипте текущего кадра написать следующий код.</p>
    <table id="table_l4s_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p>p = <b>getmousepos</b>; //координаты курсора мыши </p>
              <p>c = ImageList.Points[3]; //левый верхний угол кнопки</p>
              <p>s = ImageList.Points[2]; //правый нижний угол кнопки</p>
              <p>px = <b>xcoord</b>(p); //координата X мыши</p>
              <p>py = <b>ycoord</b>(p); //координата Y мыши</p>
              <p>cx = <b>xcoord</b>(c); //координата X л.в. угла кнопки</p>
              <p>cy = <b>ycoord</b>(c); //координата Y л.в. угла кнопки</p>
              <p>sx = <b>xcoord</b>(s); //координата X п.н. угла кнопки</p>
              <p>sy = <b>ycoord</b>(s); //координата Y п.н. угла кнопки</p>
              <p> </p>
              <p><b>if</b> (px > cx) <b>AND</b> (px &lt; sx) <b>AND</b> (py > cy) <b>AND</b> (py
                &lt; sy) //проверка на попадание курсора мыши в пределы примитива</p>
              <p><b>then</b> ImageList.Index = 1</p>
              <p><b>else</b> ImageList.Index = 0; //задание индекса изображения по умолчанию для
                кнопки</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>В данном коде сначала происходит запись в переменную p координаты точки (пара координат X и
      Y), в которой находится курсор мыши, с помощью функции getmousepos. Затем в переменные c и s
      записываются пары коодинат противополжных углов примитива. Для того чтобы сравнить значения
      отдельных координат их нужно выделить из получившихся переменных с помощью функций xcoord и
      ycoord. После того, как получены отдельные переменные со значениями X и Y всех интересующих
      нас точек, происходит проверка на попадание координат курсора мыши в диапазон координат нашего
      примитива-кнопки. При положительном результате индекс изображения, отображаемого внутри
      примитива должен измениться с «0» на «1». В нашем примере это означает то, что должна
      отобразиться закрашенная стрелка. Если же условие не выполнится, то индекс будет задан равным
      «0», что соответствует изображению незалитой стрелки. Для проверки работы кода нужно запустить
      расчет и провести курсором мыши над примитивом ImageList. Если все сделано верно, при
      пересечении курсором прямоугольника примитива стрелка исзменится с незалитой на залитую, а при
      выходе курсора из этой зоны стрелка вновь изменится на незалитую. Для второй кнопки нужно
      повторить весь приведенный выше код, учитывая необходимость создания своего набора переменных
      и уникальное имя примитива ImageList1. Пример полного кода скрипта для обобщенного кадра
      приводится ниже.</p>
    <table id="table_m4s_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p>p = <b>getmousepos</b>; //координаты курсора мыши </p>
              <p> </p>
              <p>c = ImageList.Points[3]; //левый верхний угол кнопки</p>
              <p>s = ImageList.Points[2]; //правый нижний угол кнопки</p>
              <p>c1 = ImageList1.Points[3]; //левый верхний угол кнопки1</p>
              <p>s1 = ImageList1.Points[2]; //правый нижний угол кнопки1</p>
              <p> </p>
              <p>px = <b>xcoord</b>(p); //координата X мыши</p>
              <p>py = <b>ycoord</b>(p); //координата Y мыши</p>
              <p> </p>
              <p>cx = <b>xcoord</b>(c); //координата X л.в. угла кнопки</p>
              <p>cy = <b>ycoord</b>(c); //координата Y л.в. угла кнопки</p>
              <p>sx = <b>xcoord</b>(s); //координата X п.н. угла кнопки</p>
              <p>sy = <b>ycoord</b>(s); //координата Y п.н. угла кнопки</p>
              <p> </p>
              <p>c1x = <b>xcoord</b>(c1); //координата X л.в. угла кнопки1</p>
              <p>c1y = <b>ycoord</b>(c1); //координата Y л.в. угла кнопки1</p>
              <p>s1x = <b>xcoord</b>(s1); //координата X п.н. угла кнопки1</p>
              <p>s1y = <b>ycoord</b>(s1); //координата Y п.н. угла кнопки1</p>
              <p> </p>
              <p><b>if</b> (px > cx) <b>AND</b> (px &lt; sx) <b>AND</b> (py > cy) <b>AND</b> (py
                &lt; sy) //проверка на попадание курсора мыши в пределы примитива</p>
              <p><b>then</b> ImageList.Index = 1</p>
              <p><b>else</b> ImageList.Index = 0; //задание индекса изображения по умолчанию для
                кнопки</p>
              <p><b>if</b> (px > c1x) <b>AND</b> (px &lt; s1x) <b>AND</b> (py > c1y) <b>AND</b> (py
                &lt; s1y) //проверка на попадание курсора мыши в пределы примитива1</p>
              <p><b>then</b> ImageList1.Index = 1</p>
              <p><b>else</b> ImageList1.Index = 0; //задание индекса изображения по умолчанию для
                кнопки1</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> </p>
    <p><b>Кадр измеряемых показаний</b></p>
    <p>В данном кадре также должны присутствовать две кнопки – одна для перехода на кадр верхнего
      уровня, вторая для перехода на кадр диагностики. Для первой кнопки можно скопировать уже
      готовый примитив из обобщенного кадра, не забыв перевернуть изображение так, чтобы стрелка
      указывала вверх. Также нужно будет внести соответствующие изменения в условие сравнения
      координат вдоль оси Y. Если раньше происходила проверка на достоверность условия cy &lt; py
      &lt; sy, то после преобразования необходимо проверять условие sy &lt; py &lt; cy. Кроме того в
      свойстве «Ссылка» примитива ImageList нужно указать страницу проекта «page1».</p>
    <p>Для создания второй кнопки логично было бы изобразить стрелку, указывающую в горизонтальном
      направлении, т.к. по нашей структуре кадр диагностики и кадр отображения показаний принадлежат
      одному уровню. Но используемымые нами примитивы «Набор изображений» не поддерживают
      возможность вращения изображения. По этому для второй кнопки нужно взять другое изображение
      стрелки.</p>
    <p><image href="videoframes-sample_images/image046.png" height="130" width="297"
        id="image_n4s_4pv_ry"/></p>
    <p><b>Рисунок для кнопки перехода на кадр того же уровня</b></p>
    <p>Имя второго примитива «ImageList1», ссылка «page2_2». Все остальные атрибуты второго
      примитива должны соответствовать атрибутам первого. Сопутствующий код для страницы page2_1
      выглядит следующим образом.</p>
    <table id="table_o4s_4pv_ry">
      <tgroup cols="1">
        <colspec colnum="1" colname="col1"/>
        <tbody>
          <row>
            <entry>
              <p>p = <b>getmousepos</b>;</p>
              <p> </p>
              <p>c = ImageList.Points[3];</p>
              <p>s = ImageList.Points[2];</p>
              <p>c1 = ImageList1.Points[3];</p>
              <p>s1 = ImageList1.Points[2];</p>
              <p> </p>
              <p>px = <b>xcoord</b>(p);</p>
              <p>py = <b>ycoord</b>(p);</p>
              <p> </p>
              <p>cx = <b>xcoord</b>(c);</p>
              <p>cy = <b>ycoord</b>(c);</p>
              <p>sx = <b>xcoord</b>(s);</p>
              <p>sy = <b>ycoord</b>(s);</p>
              <p>c1x = <b>xcoord</b>(c1);</p>
              <p>c1y = <b>ycoord</b>(c1);</p>
              <p>s1x = <b>xcoord</b>(s1);</p>
              <p>s1y = <b>ycoord</b>(s1);</p>
              <p> </p>
              <p><b>if</b> (px > cx) <b>AND</b> (px &lt; sx) <b>AND</b> (py &lt; cy) <b>AND</b> (py
                > sy) </p>
              <p><b>then</b> ImageList.Index = 1</p>
              <p><b>else</b> ImageList.Index = 0;</p>
              <p><b>if</b> (px > c1x) <b>AND</b> (px &lt; s1x) <b>AND</b> (py &lt; c1y) <b>AND</b>
                (py > s1y) </p>
              <p><b>then</b> ImageList1.Index = 1</p>
              <p><b>else</b> ImageList1.Index = 0;</p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> </p>
    <p><image href="videoframes-sample_images/image047.png" height="452" width="796"
        id="image_p4s_4pv_ry"/></p>
    <p><b>Вид кадра показаний с кнопками навигации</b></p>
    <p><b>Кадр диагностики</b></p>
    <p>Для кадра диагностики целесообразно скопировать обе кнопки и сопутствующий им код из кадра
      показаний без каких-либо изменений за исключением замены ссылки в примитиве ImageList1 с
      «page2_2» на «page2_1».</p>
    <p><image href="videoframes-sample_images/image048.png" height="452" width="796"
        id="image_q4s_4pv_ry"/></p>
    <p><b>Вид кадра диагностики с кнопками навигации</b></p>
    <p><b>Внешний вид окон</b></p>
    <p>В целях минимизации возможностей имеющихся у пользователя для изменения внешнего вида кадров
      можно воспользоваться рядом опций. Однако прежде, чем вносить изменения стоит убедиться в том,
      что все страницы проекта, являющиеся кадрами, переведены в режим «Индикация».</p>
    <p><image href="videoframes-sample_images/image049.png" height="154" width="262"
        id="image_r4s_4pv_ry"/></p>
    <p><b>Переключение режимов отображения в схемном окне проекта</b></p>
    <p>В меню «Вид» схемного окна проекта можно отключить следующие опции:</p>
    <ul id="ul_s4s_4pv_ry">
      <li>- Дополнительно:</li>
      <li>- Блокировать масштабирование и перемещение;</li>
      <li>- Полосы прокрутки;</li>
      <li>- Строка состояния;</li>
      <li>- Закладки режима редактора;</li>
      <li>- Панели инструментов:</li>
      <li>- Слои.</li>
    </ul>
    <p>Также в контекстном меню схемного окна можно включить опцию «Скрыть меню окна». Данную опцию
      нужно применить отдельно для каждой страницы проекта.</p>
    <p><image href="videoframes-sample_images/image050.png" height="452" width="796"
        id="image_t4s_4pv_ry"/></p>
    <p><b>Внешний вид главной страницы проекта</b></p>
    <p><image href="videoframes-sample_images/image051.png" height="452" width="796"
        id="image_u4s_4pv_ry"/></p>
    <p><b>Кадр обобщенной сигнализации</b></p>
    <p><image href="videoframes-sample_images/image052.png" height="452" width="796"
        id="image_v4s_4pv_ry"/></p>
    <p><b>Кадр отображения измеряемых показаний</b></p>
    <p><image href="videoframes-sample_images/image053.png" height="452" width="796"
        id="image_w4s_4pv_ry"/></p>
    <p><b>Кадр диагностики</b></p>
  </body>
</topic>
