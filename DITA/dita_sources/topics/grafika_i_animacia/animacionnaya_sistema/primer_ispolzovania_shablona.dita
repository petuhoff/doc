<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_x5n_gv5_qf">
  <title>Пример использования шаблона </title>
  <body>
    <p>В данном примере показан вариант использования шаблона в проекте, содержащем несколько
      источников сигналов. Исходный состав проекта включает в себя шесть источников. Наша задача
      будет состоять в том, чтобы с помощью текстовых примитивов отображать текущие значения,
      получаемые от этих источников. При этом для каждого источника должен использоваться свой
      текстовый примитив, а отображение должно включаться и отключаться по кнопке.</p>
    <p><image href="templates-sample_images/image001.png" height="581" width="710"
        id="image_wvd_5dv_ry"/></p>
    <p><b>Исходный вид проекта</b></p>
    <p>Сначала добавим необходимые блоки в проект. В первую очередь добавим приемники значений
      источников и соединим их с блоками источников. Для этого в палитре компонентов Схемного окна
      откроем вкладку «Данные», а в ней выберем блок «<image
        href="templates-sample_images/image002.png" height="20" width="38" id="image_xvd_5dv_ry"
      />Запись в список сигналов» и добавим его в Схемное окно. Затем соединим выход первого
      источника и вход данного блока. Повторим данную операцию для оставшихся источников. Также
      добавим примитив «<image href="templates-sample_images/image003.png" height="25" width="25"
        id="image_yvd_5dv_ry"/>Кнопка» с панели примитивов. Промежуточный результат должен выглядеть
      аналогично иллюстрации ниже.</p>
    <p><image href="templates-sample_images/image004.png" height="581" width="710"
        id="image_zvd_5dv_ry"/></p>
    <p><b>Организация записи генерируемых значений в сигналы проекта</b></p>
    <p>Добавим примитив «<image href="templates-sample_images/image005.png" height="25" width="25"
        id="image_awd_5dv_ry"/>Текст» из панели примитивов, вызвав её через меню Схемного
        окна:<b>«СО: Вставка </b><b>®</b><b> Панель примитивов...»</b>. Затем откроем редактор
      свойства «Шаблон автозаполнения». Для этого по ПКМ вызовем контекстное меню и выберем пункт
      «Свойства объекта».</p>
    <p><image href="templates-sample_images/image006.png" height="684" width="590"
        id="image_bwd_5dv_ry"/></p>
    <p><b>Окно свойств исходного текстового примитива</b></p>
    <p>В открывшемся окне, во вкладке «Общие» выберем строку «Шаблон автозаполнения» и в правой
      ячейке нажмём кнопку <image href="templates-sample_images/image007.jpg" height="21" width="21"
        id="image_cwd_5dv_ry"/>. Откроется текстовый редактор, в котором мы запишем команды шаблона.
      С помощью шаблона мы создадим сигнал для нашего текстового примитива, опишем поясняющий текст
      и логику отображения значения сигнала с учётом положения кнопки с именем «Button»:</p>
    <p>SIGNAL sig_$self.Name$</p>
    <p>SCRIPT $self.Name$.Text = "data_$self.Name$ ="</p>
    <p>SCRIPT if button.down then $self.Name$.Values = sig_$self.Name$ else $self.Name$.Values =
      0</p>
    <p>Закроем окно текстового редактора по кнопке <image href="templates-sample_images/image008.png"
        height="25" width="25" id="image_dwd_5dv_ry"/>. Затем в окне свойств обязательно нужно
      нажать кнопку «Применить», иначе все изменения будут утеряны. </p>
    <p>Рассмотрим подробнее команды нашего шаблона. Первая строка создаст сигнал с именем, влючающим
      в себя имя объекта, содержащего шаблон, т.е. в нашем случае будет создан сигнал sig_txt_1.
      Вторая строка создаст строку скрипта в Схемном окне, которая будет присваивать свойству «Text»
      нашего примитива строку «data_txt_1 =». В третьей строке задаётся условие, по которому при
      нажатой кнопке button свойству Values нашего текстового примитива присваиваются значения
      сигнала sig_txt_1, а при отжатой – ноль. Мы воспользовались скриптом для связывания сигнала и
      свойства примитива, т.к. эта связь должна подчиняться дополнительным условиям. В более простом
      случае, если значения сигнала всегда должны отображаться нашим текстовым примитвом, третью
      строку можно было бы заменить на команду CONNECT, создающую прямую связь между сигналом и
      свойством объекта:</p>
    <p>CONNECT sig_$self.Name$, $self.Name$.Values</p>
    <p>Далее изменим имя текстового примитива с «TextLabel» на «txt_1». Тогда при копировании
      данного примитива новые примитивы будут автоматически именоваться как &lt;текст>&lt;n+1>, т.е.
      в нашем случае: «txt_2», «txt_3» и т.д.</p>
    <p>Для отображения числовых значений сигналов установим свойство «Values» в значение «Показывать
      справа». Теперь окно свойств нашего текстового примитива можно закрыть.</p>
    <p>Теперь нужно размножить наш текстовый примитив с шаблоном простым копированием. Всего в
      проекте должно получиться шесть текстовых примитивов с именами «txt_1», «txt_2», «txt_3»,
      «txt_4», «txt_5», «txt_6». На рисунке ниже представлен примерный вид Схемного окна на данном
      этапе.</p>
    <p><image href="templates-sample_images/image009.png" height="484" width="605"
        id="image_ewd_5dv_ry"/></p>
    <p><b>Вид Схемного окна после добавления текстовых примитивов</b></p>
    <p>Теперь нужно воспользоваться нашим шаблоном. Для этого выделим все текстовые примитивы и в
      меню Схемного окна выберем пункт <b>«СО: Сервис </b><b>®</b><b> Генерация сигналов и
        связей»</b>. После этого нужно проверить список сигналов проекта и содержимое скрипта в
      Схемном окне. Для просмотра списка сигналов нужно выбрать пункт меню Схемного окна <b>«СО:
        Сервис </b><b>®</b><b> Сигналы...»</b>, а для проверки скрипта в левой части схемного окна
      выбрать вкладку «Параметры». Данные окна должны выглядеть следующим образом.</p>
    <p><image href="templates-sample_images/image010.png" height="400" width="782"
        id="image_fwd_5dv_ry"/>
    </p>
    <p><image href="templates-sample_images/image011.png" height="424" width="822"
        id="image_gwd_5dv_ry"/></p>
    <p><b>Состав сигналов проекта и содержимое скрипта в Схемном окне после применения
      шаблонов</b></p>
    <p>В качестве завершающего действия необходимо указать имена сигналов в блоках «Приёмник»,
      подключённых к источникам. Для этого нужно выделить блок, по клику ПКМ вызвать контекстное
      меню и выбрать пункт «Свойства объекта». В открывшемся окне выбрать вкладку «Свойства», строку
      «Имена сигналов» и вписать имя сигнала в ячейку справа.</p>
    <p><image href="templates-sample_images/image012.png" height="463" width="365"
        id="image_hwd_5dv_ry"/></p>
    <p><b>Указание имени сигнала для записи значений в блоке «Приёмник»</b></p>
    <p>Результат в Схемном окне должен выглядеть так.</p>
    <p><image href="templates-sample_images/image013.png" height="581" width="822"
        id="image_iwd_5dv_ry"/></p>
    <p><b>Содержимое Схемного окна после указания сигналов в блоках «Приёмник»</b></p>
    <p>Теперь в нашем проекте можно запустить расчёт, предварительно переведя Схемное окно из режима
      «Редактирование» в режим «Индикация».</p>
    <p>
      <image href="templates-sample_images/image014.png" height="154" width="262"
        id="image_jwd_5dv_ry"/></p>
    <p><b>Переключение режимов отображения Схемного окна</b></p>
    <p>Ниже представлены виды Схемного окна при отжатой и при нажатой кнопке.</p>
    <p><image href="templates-sample_images/image015.png" height="442" width="534"
        id="image_kwd_5dv_ry"/><image href="templates-sample_images/image016.png" height="442"
        width="534" id="image_lwd_5dv_ry"/></p>
    <p><b>Демонстрация работы анимации в схемном окне проекта</b></p>
    <p>Данный пример несложно модифицировать так, чтобы каждый текстовый примитив включался и
      отключался по своей кнопке. Сначала вернём проект на несколько шагов назад. Для этого удалим
      все текстовые примитивы кроме первого с именем «txt_1», очистим список сигналов проекта и
      удалим все сгенерированные скрипты. </p>
    <p>Далее переименуем кнопку из «Button» в «Button_txt_1» и скопируем её пять раз. </p>
    <p><image href="templates-sample_images/image017.png" height="646" width="603"
        id="image_mwd_5dv_ry"/></p>
    <p><b>Изменение имени примитива «Кнопка»</b></p>
    <p>В итоге проект должен содержать кнопки с именами «Button_txt_1», «Button_txt_2»,
      «Button_txt_3», «Button_txt_4», «Button_txt_5», «Button_txt_6».</p>
    <p>После этого отредактируем шаблон, содержащийся в примитиве «txt_1». Заменим третью строку: </p>
    <p>SCRIPT if button.down then $self.Name$.Values = sig_$self.Name$ else $self.Name$.Values =
      0</p>
    <p>на строку:</p>
    <p>SCRIPT if button<b>_$self.Name$</b>.down then $self.Name$.Values = sig_$self.Name$ else
      $self.Name$.Values = 0</p>
    <p>Схемное окно должно выглядетть следующим образом. На данном этапе текст в текстовых
      примитивах может отличаться от приведённого на изображении, это не существенно.</p>
    <p>После этого снова размножим этот текстовый примитив, чтобы получить шесть однотипных
      объектов, выделим их и проведём генерацию сигналов и скриптов.</p>
    <p><image href="templates-sample_images/image018.png" height="480" width="569"
        id="image_nwd_5dv_ry"/></p>
    <p><b>Вид Схемного окна после модификации проекта</b></p>
    <p>Состав сигналов будет аналогичен тому, что был получен в первый раз, а текст скрипта
      изменится в том месте, где проверяется состояние кнопки, поскольку теперь каждому примитиву
      важно состояние именно его кнопки.</p>
    <p><image href="templates-sample_images/image019.png" height="388" width="725"
        id="image_owd_5dv_ry"/></p>
    <p><b>Скрипт, сгенерированный по изменённому шаблону</b></p>
    <p>В итоге при запуске расчёта мы должны получить подобную картину. </p>
    <p><image href="templates-sample_images/image020.png" height="480" width="569"
        id="image_pwd_5dv_ry"/></p>
    <p><b>Вид Схемного окна с запущенным расчётом при использовании индивидуальных кнопок.</b></p>
    <p>Каждый текстовый примитив управляется своей собственной кнопкой.</p>
    <p>При использовани различных языковых конструкций типа «formattext-end», «getstrformat» и т.п.
      можно добиться большей автоматизации при создании проекта, однако это требует более тесного
      знакомства с языком программирования SimInTech.</p>
  </body>
</topic>
