<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_x5n_gv5_qf">
  <title>Пример создания анимированных объектов </title>
  <body>
    <p>В данном примере рассмотрен процесс создания внешне идентичных анимированных объектов
      SimInTech двумя различными способами:</p>
    <ul id="ul_fl1_m2v_ry">
      <li>­ добавлением графических примитивов непосредственно в схемное окно проекта;</li>
      <li>­ созданием составного объекта, обособленного в контейнере «графическая группа».</li>
    </ul>
    <p>На рисунке ниже представлен внешний вид этих объектов.</p>
    <p><image href="animation-sample_images/image001.png" height="447" width="547"
        id="image_gl1_m2v_ry"/></p>
    <p>Внешне идентичные анимированные объекты: а – объект, скомпонованный из примитивов
      непосредственно в <b>схемном окне проекта; б – объект, скомпонованный внутри контейнера
        «графическая группа»</b></p>
    <p>В отдельных примерах рассмотрены случаи создания анимированной пиктограммы для блока
      «Субмодель» и панели управления.</p>
    <p>Процесс создания анимированного объекта условно можно разделить на три этапа:</p>
    <ul id="ul_hl1_m2v_ry">
      <li>1) Компоновка изображения для будущей анимации. </li>
      <li>2) Создание необходимого окружения из сигналов, переменных, глобальных свойств.</li>
      <li>3) Описание связей между созданным окружением и свойствами графических примитивов, а также
        логики работы.</li>
    </ul>
    <p>Приведённый порядок следования этапов не является обязательным, действия могут выполняться в
      удобной для разработчика последовательности.</p>
    <p>Для любой анимации необходимы динамически изменяющиеся в процессе расчёта значения. В
      реальном проекте моделирования такие значения есть в наличии де-факто, если появляется задача
      их визуализации. В нашем примере пока таких сигналов нет, поэтому мы начнём с нулевого этапа –
      создания модели, порождающей какие-либо величины, изменяющиеся во времени. </p>
    <p><i>Нулевой этап – создание модели, предмета визуализации</i></p>
    <p>Для этого создадим новый пустой проект типа «Схема автоматики» (процесс создания
      анимированных объектов во всех типах проектов одинаков). Затем соберём в нём следующую модель
      на основе библиотечных блоков SimInTech.</p>
    <p><image href="animation-sample_images/image002.png" height="203" width="378"
        id="image_il1_m2v_ry"/></p>
    <p>Исходная расчетная модель</p>
    <p>Изменим свойства блоков источников следующим образом:</p>
    <ul id="ul_jl1_m2v_ry">
      <li>­ синусоидальный источник: амплитуда = 50;</li>
      <li>­ константа = 50;</li>
      <li>­ пилообразный источник: размах = 4.</li>
    </ul>
    <p><image href="animation-sample_images/image003.png" height="463" width="365"
        id="image_kl1_m2v_ry"/></p>
    <p><image href="animation-sample_images/image004.png" height="463" width="365"
        id="image_ll1_m2v_ry"/></p>
    <p><image href="animation-sample_images/image005.png" height="463" width="365"
        id="image_ml1_m2v_ry"/></p>
    <p>Характеристики динамических блоков модели</p>
    <p>При запуске расчёта данной модели на выходе мы будем иметь две динамически изменяющихся
      величины: синусоидальный сигнал с диапазоном значений от 0 до 100 и пилообразный периодический
      сигнал с диапазоном значений от 0 до 4. Теперь можно приступать к созданию анимированного
      виртуального показывающего прибора, который будет осуществлять визуализацию рассчитываемых
      сигналов.</p>
    <p><i>Первый этап – компоновка изображения для будущей анимации</i></p>
    <p>Мы рассмотрим процесс создания виртуального показывающего прибора с двумя шкалами и одним
      цифровым показанием. Данный прибор будет создан в двух вариантах: как набор примитивов в
      схемном окне проекта и как содержимое графической группы.</p>
    <p><b>Виртуальный прибор, скомпонованный непосредственно в схемном окне проекта</b></p>
    <ul id="ul_nl1_m2v_ry">
      <li>1. Сначала в любом доступном редакторе графики создадим растровое изображение лицевой
        панели нашего будущего прибора.</li>
    </ul>
    <p><image href="animation-sample_images/image006.png" height="82" width="467"
        id="image_ol1_m2v_ry"/></p>
    <p>Растровое изображение лицевой панели будущего виртуального прибора</p>
    <p>Пурпурный цвет (RGB: 255 0 255) используется в тех местах, которые в окончательном варианте
      должны стать прозрачными. Можно использовать любой другой цвет, однако использование
      пурпурного для этих целей является традиционным. Сохраняем полученный рисунок в одном из
      растровых форматов: BMP, JPG, PNG. Дальнейшие действия выполняются в окне созданного ранее
      проекта SimInTech.</p>
    <ul id="ul_pl1_m2v_ry">
      <li>2. Для продолжения нам понадобятся графические примитивы. Панель с примитивами можно
        вызвать из меню главного окна SimInTech: <b>«ГО: Вставка→ Панель примитивов...»</b>.</li>
    </ul>
    <p><image href="animation-sample_images/image007.png" height="86" width="543"
        id="image_ql1_m2v_ry"/></p>
    <p>Панель графических примитивов SimInTech</p>
    <ul id="ul_rl1_m2v_ry">
      <li>3. Для добавления созданного изображения лицевой панели нашего прибора в схемное окно
        проекта нужно использовать графический примитив «<image
          href="animation-sample_images/image008.png" height="25" width="25" id="image_sl1_m2v_ry"
        />Растровое изображение». После его добавления в схемное окно проекта нужно вызвать окно
        свойств примитива по двойному клику на нём и в свойстве «Растровое изображение /
        RasterImage» указать файл с подготовленным ранее рисунком.</li>
    </ul>
    <p><image href="animation-sample_images/image009.png" height="499" width="566"
        id="image_tl1_m2v_ry"/></p>
    <p>Свойства примитива «Растровое изображение / RasterImage»</p>
    <ul id="ul_ul1_m2v_ry">
      <li>4. Затем нужно установить следующие свойства примитива:</li>
      <li>­ «Прозрачность / Transparent» – Да;</li>
      <li>­ «Прозрачный цвет / TransColor» – выбрать пурпурный (RGB: 255 0 255);</li>
      <li>­ «Сохранять пропорции / Proportional» – Да.</li>
    </ul>
    <p>По завершении установок нажать в окне «Свойства» кнопку «Ок». В результате в схемном окне
      проекта должно появиться нечто похожее на изображение ниже.</p>
    <p><image href="animation-sample_images/image010.png" height="137" width="145"
        id="image_vl1_m2v_ry"/></p>
    <p>Вид примитива «Растровое изображение / RasterImage» после предварительной настройки</p>
    <p>Изменяя размеры примитива можно добиться более приемлемого отображения.</p>
    <p><image href="animation-sample_images/image011.png" height="131" width="555"
        id="image_wl1_m2v_ry"/></p>
    <p>Вид примитива «Растровое изображение / RasterImage» после изменения размеров</p>
    <ul id="ul_xl1_m2v_ry">
      <li>5. Добавим примитив «<image href="animation-sample_images/image012.png" height="25"
          width="25" id="image_yl1_m2v_ry"/>Полигон», который будет выполнять роль шкалы,
        заполняющейся по значениям от синусоидального источника. Полигон должен иметь вид
        прямоугольника. Для единообразия ваших последующих расчётов с примером рекомендуется первую
        точку полигона размещать в верхнем левом углу и далее ставить точки по часовой стрелке.
      </li>
    </ul>
    <p><image href="animation-sample_images/image013.png" height="101" width="438"
        id="image_zl1_m2v_ry"/></p>
    <p>Взаимное расположение вершин полигона</p>
    <p>Пусть полигон перекрывает по высоте длинную щель в лицевой панели нашего виртуального
      прибора.</p>
    <p><image href="animation-sample_images/image014.png" height="165" width="569"
        id="image_am1_m2v_ry"/></p>
    <p>Добавление полигона</p>
    <ul id="ul_bm1_m2v_ry">
      <li>6. Затем нужно переместить получившийся полигон за растровую картинку. Это можно сделать,
        например, выделив полигон, и в контекстном меню, вызванном по правой кнопке мыши, выбрать
        пункт «<image href="animation-sample_images/image015.png" height="25" width="25"
          id="image_cm1_m2v_ry"/> Поместить назад». Полигон отобразится за растровым изображением
        после того, как с него будет снято выделение. </li>
    </ul>
    <p>Обратите внимание: любой выделяемый графический примитив отображается поверх других
      независимо от его реального положения. После снятия выделения примитив отображается в
      соответствии со своим порядком размещения по глубине. Подробнее о манипуляциях с графическими
      объектами читайте в соответствующем разделе.</p>
    <ul id="ul_dm1_m2v_ry">
      <li>7. Следующим шагом нанесём градуировку на шкальную часть нашего прибора. Для этого проще
        всего использовать примитив «<image href="animation-sample_images/image016.png" height="25"
          width="25" id="image_em1_m2v_ry"/> Линейная шкала». Разместим его под щелью с полигоном,
        выровняем шкалу так, чтобы её крайние риски совпадали с левой и правой границами полигона и
        установим следующие свойства:</li>
      <li>- «Число делений на шаг / DivCount» – 4;</li>
      <li>- «Толщина малого штриха / SmallWidth» – 2;</li>
      <li>- «Толщина большого штриха / LargeWidth» – 2.</li>
      <li>8. В итоге изображение должно стать похожим на рисунок ниже.</li>
    </ul>
    <p><image href="animation-sample_images/image017.png" height="147" width="549"
        id="image_fm1_m2v_ry"/></p>
    <p>Добавление шкалы</p>
    <ul id="ul_gm1_m2v_ry">
      <li>9. Теперь добавим стрелочный прибор во второй вырез в лицевой панели виртуального прибора.
        Для этого будем использовать примитив «<image href="animation-sample_images/image018.png"
          height="25" width="25" id="image_hm1_m2v_ry"/> Стрелочный прибор». Установим для него
        следующие свойства:</li>
      <li>- Верхний предел – 4;</li>
      <li>- Шаг – 1;</li>
      <li>- Число делений на шаг – 0;</li>
      <li>- Угол охвата шкалы (радианы) – 2;</li>
      <li>- Число больших делений на шаг – 1;</li>
      <li>- Шрифт – Arial, Размер – 8, Жирный.</li>
      <li>10. Затем получившийся стрелочный прибор нужно вписать в правый вырез прибора, чтобы
        получилось следующее изображение. По окончании переместить примитив на задний план:
        контекстное меню, пункт « <image href="animation-sample_images/image015.png" height="25"
          width="25" id="image_im1_m2v_ry"/> Поместить назад».</li>
    </ul>
    <p><image href="animation-sample_images/image019.png" height="165" width="551"
        id="image_jm1_m2v_ry"/></p>
    <p>Встраивание стандартного стрелочного прибора</p>
    <ul id="ul_km1_m2v_ry">
      <li>11. В качестве завершающего эстетического элемента можно разместить за прибором чёрную
        подложку в виде примитива «<image href="animation-sample_images/image020.png" height="25"
          width="25" id="image_lm1_m2v_ry"/> Залитый прямоугольник». </li>
    </ul>
    <p><image href="animation-sample_images/image021.png" height="146" width="548"
        id="image_mm1_m2v_ry"/></p>
    <p>Добавление и изменение размера прямоугольника для фона</p>
    <p><image href="animation-sample_images/image022.png" height="147" width="553"
        id="image_nm1_m2v_ry"/></p>
    <p>Изменение цвета заливки фонового прямоугольника на черный</p>
    <p><image href="animation-sample_images/image023.png" height="147" width="551"
        id="image_om1_m2v_ry"/></p>
    <p>Перенос фонового прямоугольника на задний план</p>
    <ul id="ul_pm1_m2v_ry">
      <li>12. Для читаемости стрелочной шкалы изменим цвет её элементов на белый:</li>
      <li>- Цвет – выбрать белый (RGB: 0 0 0);</li>
      <li>- Цвет стрелки – выбрать белый (RGB: 0 0 0);</li>
      <li>- Шрифт – выбрать белый (RGB: 0 0 0).</li>
    </ul>
    <p><image href="animation-sample_images/image024.png" height="147" width="550"
        id="image_qm1_m2v_ry"/></p>
    <p>Новый внешний вид виртуального прибора</p>
    <p>Осталось дополнить проект цифровым прибором, который будет показывать в зависимости от
      положения выключателя либо значение сигнала sin1, либо значение сигнала pila1. Для этого
      разместим в схемном окне проекта рядом с нашим виртуальным прибором примитив «<image
        href="animation-sample_images/image025.png" height="25" width="25" id="image_rm1_m2v_ry"/>
      Текст».</p>
    <p><image href="animation-sample_images/image026.png" height="202" width="553"
        id="image_sm1_m2v_ry"/></p>
    <p>Добавление текстового примитива для отображения значений источников из модели</p>
    <p>Оставим данный примитив без изменений и добавим управляющий графический примитив «<image
        href="animation-sample_images/image027.png" height="25" width="25" id="image_tm1_m2v_ry"/>
      Кнопка».</p>
    <p><image href="animation-sample_images/image028.png" height="228" width="548"
        id="image_um1_m2v_ry"/></p>
    <p>Добавление кнопки для переключения между источниками для текстового примитива</p>
    <p>Итак, изображение в схемном окне проекта скомпоновано.</p>
    <p><i>Второй этап – создание окружения</i></p>
    <ul id="ul_vm1_m2v_ry">
      <li>13. Для использования значений, рассчитываемых в модели, необходимо организовать их запись
        в сигналы проекта либо базы данных. Создадим два сигнала проекта. Вызовем редактор сигналов:
          <b>«ГО:</b><b>Графика→Сигналы»</b>. Откроется окно «Редактор сигналов проекта».</li>
    </ul>
    <p><image href="animation-sample_images/image029.png" height="389" width="765"
        id="image_wm1_m2v_ry"/></p>
    <p>Окно редактора связей</p>
    <ul id="ul_xm1_m2v_ry">
      <li>14. В открывшемся окне по нажатию на кнопку <image
          href="animation-sample_images/image030.png" height="25" width="25" id="image_ym1_m2v_ry"/>
        поочередно создадим два сигнала. По двойному щелчку в полях «Имя» и «Название» можно ввести
        произвольные имена и описания сигналов. Имена могут состоять из цифр и латинских букв,
        описания также могут содержать русские буквы. Все обращения к сигналам в SimInTech
        осуществляются по их именам, например, в редакторе связей или в скриптах. Установим свойства
        сигналов, как показано на следующем рисунке. </li>
    </ul>
    <p><image href="animation-sample_images/image031.png" height="389" width="765"
        id="image_zm1_m2v_ry"/></p>
    <p>Настройки для добавляемых в проект сигналов</p>
    <ul id="ul_an1_m2v_ry">
      <li>15. Теперь необходимо организовать запись расчётных величин из модели в эти сигналы. Это
        можно сделать с помощью библиотечного блока «Запись в список сигналов» из вкладки «Данные»
        главного окна. В свойстве «Имена сигналов» (вкладка «Свойства» окна
        «Свойства»:&lt;Имя_Объекта>) для каждого из этих блоков нужно вписать Имя сигнала,
        заготовленного для регистрации расчётной величины. Окно свойств блока вызывается по двойному
        клику на блоке.</li>
    </ul>
    <p><image href="animation-sample_images/image032.png" height="23" width="23"
        id="image_bn1_m2v_ry"/><image href="animation-sample_images/image033.png" height="631"
        width="367" id="image_cn1_m2v_ry"/>
      <image href="animation-sample_images/image034.png" height="630" width="366"
        id="image_dn1_m2v_ry"/></p>
    <p>Установление соответствия между выходами схемы модели и сигналами проекта</p>
    <p>Теперь при запуске расчёта модели в сигналы sin1 и pila1 будут записываться значения
      синусоиды и пилы от источников из нашей схемы, собранной в схемном окне проекта.</p>
    <p><i>Третий этап – описание связей и логики работы</i></p>
    <p>Описание связей между сигналами и свойствами объектов может быть сделано как с помощью
      редактора связей, так и с помощью скрипта на встроенном языке программирования. В нашем
      примере мы будем использовать оба варианта. </p>
    <p>Сначала рассмотрим использование редактора связей. </p>
    <ul id="ul_en1_m2v_ry">
      <li>16. Установим с помощью редактора связей соответствие между сигналом pila1 и показаниями
        стрелочной шкалы. Для этого нужно вызвать редактор связей из меню главного окна: <b>«ГО:
          Сервис→Связи...»</b>. Откроется окно редактора связей.</li>
    </ul>
    <p><image href="animation-sample_images/image035.png" height="429" width="651"
        id="image_fn1_m2v_ry"/></p>
    <p>Окно редактора связей</p>
    <ul id="ul_gn1_m2v_ry">
      <li>17. Затем нужно выбрать вкладку «Сигнал» в правой части открывшегося окна: появится список
        сигналов проекта. </li>
      <li>18. Сигнал pila1 нужно переместить в правую часть окна в ячейку «источник», перетянув
        строку с сигналом курсором мыши в эту ячейку.</li>
    </ul>
    <p><image href="animation-sample_images/image036.png" height="429" width="652"
        id="image_hn1_m2v_ry"/></p>
    <p>Добавление сигнала pila1 в качестве источника</p>
    <ul id="ul_in1_m2v_ry">
      <li>19. Затем нужно в соседней ячейке «приемник» установить свойство «Value» анимируемого
        примитива «Стрелочный прибор». Для этого нужно в схемном окне проекта выбрать данный
        примитив, а в окне редактора связей выбрать вкладку «Объект»: отобразится список свойств
        выбранного примитива. В открывшемся списке нужно найти свойство «Value» и перетащить его
        курсором мыши в ячейку «приемник» напротив заполненной ячейки «источник». Связь
        установлена.</li>
    </ul>
    <p><image href="animation-sample_images/image037.png" height="429" width="652"
        id="image_jn1_m2v_ry"/></p>
    <p>Добавление свойства Value стрелочного прибора в качестве приемника сигнала pila1</p>
    <p>Для установления остальных связей требуются дополнительные преобразования, поэтому мы опишем
      их с помощью скрипта.</p>
    <ul id="ul_kn1_m2v_ry">
      <li>20. Теперь наша задача состоит в том, чтобы «привязать» ширину зелёного полигона к
        значению сигнала sin1 таким образом, чтобы положение правой границы полигона отмечало на
        шкале под ним значение, соответствующее текущему значению сигнала. Для этого нам нужно
        описать алгоритм изменения координат второй и третьей вершин полигона. </li>
      <li>21. Вызовем свойства полигона двойным кликом ЛКМ по его изображению и скопируем в буфер
        обмена содержимое ячейки «Points» на вкладке «Свойства».</li>
    </ul>
    <p><image href="animation-sample_images/image038.png" height="605" width="648"
        id="image_ln1_m2v_ry"/></p>
    <p>Окно свойств объекта</p>
    <ul id="ul_mn1_m2v_ry">
      <li>22. Затем закроем окно свойств, а в левой части схемного окна проекта выберем вкладку
        «Параметры». Откроется текстовый редактор для описания скриптов. Вставим в редактор
        содержимое буфера обмена. Вставится текст, содержащий координаты вершин нашего
        четырехугольного полигона в формате свойства «Points».</li>
    </ul>
    <p/>
    <p>Редактор скриптов</p>
    <ul id="ul_nn1_m2v_ry">
      <li>23. По значениям координат определим координаты правой верхней и правой нижней вершин. В
        нашем случае это вторая и третья пара координат. Очевидно для перемещения правой
        вертикальной границы полигона нам нужно задавать одинаковые значения координаты Х в этих
        парах. Также необходимо привести диапазон значений сигнала sin1 к диапазону координат Х. Для
        этого нужно разделить диапазон координат Х на диапазон значений сигнала sin1. Полученное
        значение будет равно приращению координаты Х, соответствующему единичному значению сигнала
        sin1. Итак, описание координат нужно привести к следующему виду:</li>
    </ul>
    <p><image href="animation-sample_images/image040.png" height="406" width="1055"
        id="image_on1_m2v_ry"/></p>
    <p>Формирование динамически изменяющихся координат для полигона </p>
    <ul id="ul_pn1_m2v_ry">
      <li>24. Теперь осталось присвоить свойству Points нашего полигона получившееся динамически
        рассчитываемое выражение. Для этого дополним его операцией присвоения.</li>
    </ul>
    <p><image href="animation-sample_images/image041.png" height="399" width="1037"
        id="image_qn1_m2v_ry"/></p>
    <p>Окончательный вид строки скрипта для привязки размера шкалы из полигона к значению источника
      sin1</p>
    <p>Как видно из примера формат записи свойств графических объектов в скрипте формируется в
      манере языков объектно-ориентированного программирования:
      &lt;имя_графического_объекта>.&lt;название_свойства> .</p>
    <ul id="ul_rn1_m2v_ry">
      <li>25. Чтобы проверить работу созданной нами анимации вернемся на вкладку «Схема» в схемном
        окне проекта и переведём окно в режим «Индикация» нажатием кнопки на панели инструментов
        схемного окна. Затем запустим процесс расчета модели нажатием кнопки «<image
          href="animation-sample_images/image042.png" height="25" width="25" id="image_sn1_m2v_ry"
        />Пуск» в панели инструментов ГО. Анимация должна выглядеть примерно так.</li>
    </ul>
    <p><image href="animation-sample_images/image043.gif" height="150" width="544"
        id="image_tn1_m2v_ry"/></p>
    <p><b>Пример анимации на текущей стадии</b></p>
    <ul id="ul_un1_m2v_ry">
      <li>26. Теперь дополним наш скрипт логикой, описывающей механизм переключения значения,
        отображаемого текстовым примитивом, с помощью примитива «Кнопка».</li>
    </ul>
    <p><b>if</b> button1.down <b>then</b></p>
    <p><b> begin</b></p>
    <p> textlabel4.text = "Значение pila1 = ";</p>
    <p> textlabel4.values = pila1;</p>
    <p>
      <b>end</b></p>
    <p><b>else </b></p>
    <p>
      <b>begin</b></p>
    <p> textlabel4.text = "Значение sin1 = ";</p>
    <p> textlabel4.values = sin1;</p>
    <p>
      <b>end</b></p>
    <ul id="ul_vn1_m2v_ry">
      <li> </li>
    </ul>
    <p>Обратите внимание: свойство «Text» примитива «Текст / Textlabel» предназначено для хранения
      статичных надписей. Динамически изменяющиеся значения должны присваиваться свойству
      «Values».</p>
    <p>Свойство button1.down принимает значение TRUE при нажатой кнопке и FALSE при отжатой. На
      основании значения этого свойства свойствам текстового примитива textlabel4.text и
      textlabel4.values присваиваются соответственно текстовое описание и значение либо для сигнала
      pila1, либо для сигнала sin1. </p>
    <p>Вновь запустим процесс расчета модели: цифровой индикатор должен отображать значения в
      соответствии с положением переключателя. Сам переключатель должен срабатывать по клику
      ЛКМ.</p>
    <p><b>Виртуальный прибор, скомпонованный в графическом контейнере</b></p>
    <ul id="ul_wn1_m2v_ry">
      <li>27. Теперь соберём аналогичный виртуальный показывающий прибор внутри графического
        контейнера. Для наглядности в качестве контейнера мы используем графический примитив
        «Группа», который разместим в том же проекте. Для этого выберем в панели графических
        примитивов объект «Группа» <image href="animation-sample_images/image044.png" height="25"
          width="25" id="image_xn1_m2v_ry"/> и поместим его в свободное место схемного окна
        проекта.</li>
    </ul>
    <p>Вид вновь добавленной в схемное окно проекта пустой группы </p>
    <ul id="ul_yn1_m2v_ry">
      <li>28. Для удобства установим в свойствах группы свойство «Прозрачный фон» в значение «Да».
        Окно свойств группы можно вызвать из контекстного меню.</li>
    </ul>
    <p><image href="animation-sample_images/image046.png" height="604" width="617"
        id="image_zn1_m2v_ry"/></p>
    <p>Свойства графического контейнера Group1</p>
    <ul id="ul_a41_m2v_ry">
      <li>29. Для редактирования группы нужно дважды кликнуть на её изображении ЛКМ: откроется окно
        графического редактора с содержимым группы. Чтобы не отрисовывать наш показывающий прибор
        заново внутри группы просто скопируем его.</li>
      <li>30. Нам осталось дополнить группу глобальными свойствами и с их помощью описать связи
        между сигналами проекта и свойствами графических примитивов. Для это вызовем редактор
        глобальных свойств из меню графического редактора: <b>«Сервис→Глобальные свойства...»</b>.
        Откроется показанное ниже окно</li>
    </ul>
    <p><image href="animation-sample_images/image047.png" height="265" width="642"
        id="image_b41_m2v_ry"/></p>
    <p>Редактор глобальных (общих) свойств</p>
    <p>Как и в случае с предыдущим прибором нам нужно передавать в свойства примитивов значения
      сигналов sin1 и pila1. Поэтому подготовим два глобальных свойства для трансляции этих значений
      в группу.</p>
    <p><image href="animation-sample_images/image048.png" height="265" width="642"
        id="image_c41_m2v_ry"/></p>
    <p><b>Набор необходимых глобальных свойств и их характеристики</b></p>
    <ul id="ul_d41_m2v_ry">
      <li>31. После добавления глобальных свойств закроем это окно. Если теперь закрыть окно
        редактирования группы и вновь вызвать её свойства, в конце списка мы увидим два вновь
        добавленных свойства.</li>
    </ul>
    <p><image href="animation-sample_images/image049.png" height="687" width="605"
        id="image_e41_m2v_ry"/></p>
    <p><b>Отображение вновь добавленных глобальных свойств графического контейнера в общем
        списке</b></p>
    <ul id="ul_f41_m2v_ry">
      <li>32. Последующие действия повторяют операции, описанные в п. 16 – 24 за исключением того,
        что окна редактора связей и редактора скриптов вызываются не из ГО, а из окна графического
        редактора, в котором редактируется группа. Итак, откроем редактор связей из меню
        графического редактора: <b>«Сервис→Связи...»</b> и выберем вкладку «Общее свойство».</li>
    </ul>
    <p><image href="animation-sample_images/image050.png" height="429" width="579"
        id="image_g41_m2v_ry"/></p>
    <p><b>Список глобальных свойств графического контейнера во внутреннем редакторе связей</b></p>
    <p>Перетащим свойство pila1_into_gr в ячейку «Источник» в правой части окна, как мы поступали до
      этого с сигналом проекта.</p>
    <p><image href="animation-sample_images/image051.png" height="429" width="579"
        id="image_h41_m2v_ry"/></p>
    <p><b>Выбор глобального свойства pila_into_gr в качестве источника значений…</b></p>
    <p>Теперь выделим в окне редактирования группы примитив стрелочного прибора, чтобы во вкладке
      «Объект» отобразились его свойства и перетащим в ячейку «Приемник» свойство «Value».</p>
    <p><image href="animation-sample_images/image052.png" height="429" width="579"
        id="image_i41_m2v_ry"/></p>
    <p><b>…И свойства Value второго стрелочного прибора в качестве приемника значений</b></p>
    <ul id="ul_j41_m2v_ry">
      <li>33. В случае с индикатором в виде прямоугольного полигона повторим действия, описанные в
        п.23 и 24, взяв за основу координаты полигона внутри группы и используя глобальное свойство
        вместо сигнала. Редактор скриптов для нашего контейнера вызывается из меню графического
        редактора <b>«Сервис→Скрипт...»</b>. Результат должен выглядеть примерно так. Код,
        описывающий логику работы переключателя можно скопировать из скрипта в схемном окне проекта,
        поскольку наименования всех объектов внутри группы совпадают с таковыми в схемном окне, но
        имена сигналов нужно заменить на имена соответствующих им глобальных свойств.</li>
    </ul>
    <p/>
    <p><b>Окончательный текст скрипта</b></p>
    <ul id="ul_k41_m2v_ry">
      <li>34. На данном этапе прописаны все связи внутри группы, но ещё необходимо установить
        соответствие между глобальными свойствами и сигналами проекта. Чтобы сделать это, закроем
        окно редактирования группы и вызовем редактор связей, на этот раз из меню главного окна
        SimInTech: <b>«ГО:</b><b>Сервис→Связи...»</b>. Для отображения нужных свойств выделим в
        схемном окне проекта нашу группу. Установим следующее соответствие, последовательно
        перетаскивая в правую часть окна свойства и сигналы.</li>
    </ul>
    <p><image href="animation-sample_images/image054.png" height="427" width="585"
        id="image_l41_m2v_ry"/></p>
    <p><b>Полный набор связей внутри графического контейнера</b></p>
    <ul id="ul_m41_m2v_ry">
      <li>35. Для того, чтобы переключатель внутри группы реагировал на нажатия мышки нужно
        установить свойство группы «Чувствительность» в значение «Да».</li>
    </ul>
    <p><image href="animation-sample_images/image055.png" height="687" width="606"
        id="image_n41_m2v_ry"/></p>
    <p><b>Свойство «Чувствительность / Sensible» в значении «Да»</b></p>
    <ul id="ul_o41_m2v_ry">
      <li>36. Теперь установление соответствия между сигналами проекта и содержимым группы
        завершено. Можно запустить расчет и убедиться в идентичности показаний двух наших приборов.
      </li>
    </ul>
    <p><image href="animation-sample_images/image056.gif" height="420" width="544"
        id="image_p41_m2v_ry"/></p>
    <p><b>Вид готовых анимированных объектов</b></p>
  </body>
</topic>
