<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_x5n_gv5_qf">
  <title>Формат файла описания загрузки</title>
  <body>
   
                     <p>Файл конфигурации загрузки представляет собой текстовый файл в формате ASCII с
                  разделителями строк символами с кодами 0D или 0D0A. Данный файл сообщает
                  диспетчеру РМ информацию о том, какие именно расчётные модули необходимо
                  загрузить, под какими именами алгоритмов и с каким интервалом их необходимо
                  вызывать в процессе работы прибора.</p>
                <p>Файл представляет собой таблицу, где на каждой строке описывается способ вызова
                  расчётного модуля. Строки имеют следующий формат:</p>
                <p>&lt;имя исполняемого файла расчётного модуля> &lt;имя алгоритма> &lt;интервал
                  вызова в мсек> &lt;к-во вызовов (повторов) за один интервал вызова данного
                  расчётного модуля></p>
                <p>….. и так на остальных строках. Разделитель слов в строке – пробел.</p>
                <p>Пример текста в файле:</p>
                <p>сalc algo1 60 1</p>
                <p>сalc algo2 120 2</p>
                <p>Это означает что первым выполняется расчётный модуль загружаемый из исполняемого
                  файла calc с именем алгоритма algo1, который вызывается 1 раз за 60 мсек, а вторым
                  выполняется расчётный модуль загружаемый из исполняемого файла calc с именем
                  алгоритма algo2, который вызывается 2 раза за 120 мсек. Примечание: такты
                  (периоды) должны быть кратными (то есть такты выполнения должны быть в целое
                  количество раз больше или равно минимальному среди указанных тактов алгоритмов) !
                  Минимальный временной интервал определяется автоматически исходя из файла
                  конфигурации загрузки как минимум по всем заданным тактам. Такт не может быть
                  задан меньше 1 мсек. Исходный код функции takt_work, где находится цикл вызовов
                  приведён ниже. График работы в соответствии с указанной (в примере выше)
                  конфигурацией:</p>
                <p><image href="../rsp-images/rsp-2-2-ris-1.png" height="296" width="561"
                    id="image_u42_r1t_qy"/></p>
                <p>Процессы в данной версии исполняемой среды выполняются последовательно, в
                  соответствии с тем как они описаны в файле конфигурации загрузки. При этом если у
                  процессов установлен разный такт выполнения, то общий такт будет равен
                  минимальному из заданных, но алгоритм у которого период выполнения задан больше
                  будет выполняться не на каждом шаге. Т.е например для приведённого примера algo1
                  будет выполняться на каждом шаге, а algo2 – через шаг. Время, выводимое для
                  отладчика (см. описание сетевого протокола GdbServer) равно: (минимальный из
                  заданных шагов)*(к-во циклов диспетчера). При вызовах run-функции в расчётном
                  модуле время равно 0, поскольку в явном виде нигде там не используется.</p>
                <p>Такты выполнения расчётных модулей являются задаваемой и постоянной величиной.
                  Для более подробной информации – см. исходный код DispExemod\main.c, функция
                  takt_work. Ниже приведён фрагмент данной функции с кодом расчёта условного
                  модельного времени:</p>
                <p>void takt_work(void)</p>
                <p>{</p>
                <p> int count = 0;</p>
                <p> int k = 0;</p>
                <p> uint64_t cycle1 = 0;</p>
                <p> uint64_t cycle2 = 0;</p>
                <p> uint64_t ncycles = 0;</p>
                <p> uint64_t cps = 0;</p>
                <p> struct timespec req = { 0 };</p>
                <p> double delta_scan = 0.0;</p>
                <p> double time_sleep = 0.0;</p>
                <p> char cmd[1] = {0};</p>
                <p> char rep[1] = {0};</p>
                <p> /*Цикл посылки сообщений для тестирования*/</p>
                <p> while (1)</p>
                <p> {</p>
                <p> /*Количество циклов процессора до начала обработки бд*/</p>
                <p> cycle1 = ClockCycles( );</p>
                <p> /*Будем запускать на выполнение расчетные модули время</p>
                <p> * которых пришло</p>
                <p> */</p>
                <p> for (count = 0; count &lt; ptr_header->number_exemod; count++)</p>
                <p> {</p>
                <p> /*Текущий счетчик в 0 значит время пришло*/</p>
                <p> if (ptr_exemod[count].tek_time == 0)</p>
                <p> {</p>
                <p> /*Отправим на выполнение расчетный модуль стоько</p>
                <p> * сколько он должен выполняться за один такт</p>
                <p> */</p>
                <p> for (k = 0; k &lt; ptr_exemod[count].num_work; k++)</p>
                <p> {</p>
                <p> cmd[0] = 0x01;</p>
                <p> MsgSend(ptr_exemod[count].coid, cmd, sizeof(cmd), rep, sizeof(rep));</p>
                <p> } /*for (k = 0; k &lt; ptr_exemod[count].num_work; k++)*/</p>
                <p> /*Восстановим текущее время*/</p>
                <p> ptr_exemod[count].tek_time = ptr_exemod[count].takt_mod;</p>
                <p> } /*if (ptr_exemod[count].tek_time == 0)*/</p>
                <p> } /*for (count = 0; count &lt; ptr_header->number_exemod; count++)*/</p>
                <p> /*Количество циклов процессора после обработки бд*/</p>
                <p> cycle2 = ClockCycles( );</p>
                <p> /*Количество циклов ушедшее на обработку бд*/</p>
                <p> ncycles = cycle2 - cycle1;</p>
                <p> /*Сколько циклов в секунде*/</p>
                <p> cps = SYSPAGE_ENTRY(qtime)->cycles_per_sec;</p>
                <p> /*Время затраченное на обработку бд*/</p>
                <p> delta_scan = (1000.0 * ((double) ncycles / cps));</p>
                <p> /*Время сна, с компенсацией времени на предыдущем шаге*/</p>
                <p> time_sleep = (double) ptr_header->takt - delta_scan;</p>
                <p> /*Спим оставшееся время до начала следующего такта*/</p>
                <p> nsec2timespec(&amp;req, (uint64_t) ( time_sleep * 1000000L));</p>
                <p> /*Спим до начала следующего такта*/</p>
                <p> if (nanosleep(&amp;req, NULL) == -1)</p>
                <p> {</p>
                <p> perror("nanosleep");</p>
                <p> } /*nanosleep.....*/</p>
                <p> /*Еще один такт прошел уменьшим время ожидания запуска</p>
                <p> * расчетных модулей</p>
                <p> */</p>
                <p> sheduler_takt();</p>
                <p> //Это счётчик своих тактов синхронизатора, по нему считаем время ptr_header –
                  это главная общая область памяти диспетчера /header</p>
                <p> ptr_header->takt_counter = ptr_header->takt_counter + 1;</p>
                <p> } /*while (1)*/</p>
                <p>}</p>
                <p>Далее при выводе времени на клиент (то есть в графическую оболочку) используется
                  следующий код (GdbServer.c функция packet_send):</p>
                <p>int packet_send(void)</p>
                <p>{</p>
                <p> header_packet header = {0};</p>
                <p> signal_addr var_signal_addr;</p>
                <p> struct queue_ *pkt = NULL;</p>
                <p> int sum = 0;</p>
                <p> int nbytes = 0;</p>
                <p> double f = 0;</p>
                <p> unsigned char *ptr_buf_packet = buf_packet + sizeof(header);</p>
                <p>//Это код подготовки значения модельного времени прибора </p>
                <p>//для вывода его на схеме в графической оболочке в режиме отладки </p>
                <p>/*Шаг интегрирования - в секундах !!!*/</p>
                <p> header.fStep = ptr_header->takt*0.001;</p>
                <p>//Это собственно время, выводимое в оболочке</p>
                <p> header.time_connect = ptr_header->takt_counter*header.fStep;</p>
                <p>. . . . . . . . . . . . . .</p>
    
  </body>
</topic>
