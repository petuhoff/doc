<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_x5n_gv5_qf">
  <title>Формат общих областей памяти ПО прибора</title>
  <body>
                   <p>При старте диспетчера расчётных модулей он выделяет в системе под свои нужды
                  несколько областей памяти.</p>
                <p>Область памяти /header описывается следующей структурой:</p>
                <p>typedefstruct</p>
                <p>{</p>
                <p> char name_disp[STR_LEN]; /* Имя диспетчера*/</p>
                <p> int takt; /* Базовай такт работы, мсек */</p>
                <p> int number_exemod; /* Количество расчетных модулей*/</p>
                <p> int num; /* Количество внешних сигналов */</p>
                <p> int signals_size; /* Количество байт занимаемое сигналами*/</p>
                <p> int pid; /* Пид. диспетчера*/</p>
                <p> int takt_counter; /* Локальный счётчик тактов диспетчера */</p>
                <p>} header;</p>
                <p>Здесь представлены следующие элементы:</p>
                <table id="table_ufv_51t_qy">
                  <tgroup cols="2">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <tbody>
                      <row>
                        <entry>name_disp</entry>
                        <entry>– имя файла конфигурации загрузки, указанное при старте
                          диспетчера;</entry>
                      </row>
                      <row>
                        <entry>takt</entry>
                        <entry>– базовый (минимальный из всех заданных в файле конфигурации
                          загрузки) такт работы в мсек, используется для расчёта текущего времени
                          при отладке;</entry>
                      </row>
                      <row>
                        <entry>number_exemod</entry>
                        <entry>– количество загруженных расчетных модулей (алгоритмов);</entry>
                      </row>
                      <row>
                        <entry>num</entry>
                        <entry>– общее количество внешних сигналов (равно сумме всех к-в внешних
                          сигналов для всех РМ), используется для поиска по области памяти
                          /extvars_struct;</entry>
                      </row>
                      <row>
                        <entry>signals_size</entry>
                        <entry>– количество памяти в байтах, выделенное под все внешние сигналы при
                          запуске диспетчера;</entry>
                      </row>
                      <row>
                        <entry>pid</entry>
                        <entry>– идентификатор процесса, необходимый для трансляции диспетчеру
                          сообщений и управления через сервер отладки;</entry>
                      </row>
                      <row>
                        <entry>takt_counter</entry>
                        <entry>– счётчик количества циклов посылок сообщений функции takt_work
                          диспетчера расчётных модулей.</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
                <p>Данная область памяти используется расчётными модулями и сервером отладки для
                  подключения к нужным переменным в общей области памяти, а также для управления
                  диспетчером РМ.</p>
                <p>Область памяти /exemod_struct содержит информацию о текущих загруженных расчётных
                  модулях и состоит из записей типа: количество структур = количеству расчётных
                  модулей в /header, представлено ниже:</p>
                <p>typedefstruct</p>
                <p>{</p>
                <p> Char exename[STR_LEN];</p>
                <p> Char algname[STR_LEN];</p>
                <p> int offset;</p>
                <p> int takt_mod;</p>
                <p> int tek_time;</p>
                <p> int num_work;</p>
                <p> int pid; </p>
                <p> int chid;</p>
                <p> int coid;</p>
                <p> int din_vars_bytes;</p>
                <p> int alg_vars_bytes;</p>
                <p> int state_vars_bytes;</p>
                <p> int constants_bytes;</p>
                <p> int number_extvars;</p>
                <p> unsigned char flag_error; </p>
                <p> char error_name[256];</p>
                <p>} exemod_data;</p>
                <p>В этой структуре представлены следующие элементы:</p>
                <table id="table_vfv_51t_qy">
                  <tgroup cols="2">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <tbody>
                      <row>
                        <entry>exename</entry>
                        <entry>– имя расчетного модуля (исполняемого файла);</entry>
                      </row>
                      <row>
                        <entry>algname</entry>
                        <entry>– имя алгоритма, указываемое в файле конфигурации загрузки;</entry>
                      </row>
                      <row>
                        <entry>offset</entry>
                        <entry>– начальное смещение расчетного модуля в общем массиве структур
                          сигналов (область памяти /extvars_struct);</entry>
                      </row>
                      <row>
                        <entry>takt_mod</entry>
                        <entry>– такт работы расчетного модуля в мс, заданный в файле конфигурации
                          загрузки (см. предыдущий пункт);</entry>
                      </row>
                      <row>
                        <entry>tek_time</entry>
                        <entry>– текущее время до начала исполнения, мс. Когда текущее время
                          становится равным нулю, модуль запускается на счет. Описание как эта
                          переменная используется можно посмотреть в функции takt_work, исходный
                          текст которой приведён в предыдущем разделе справки;</entry>
                      </row>
                      <row>
                        <entry>num_work</entry>
                        <entry>– количество вызовов за один такт;</entry>
                      </row>
                      <row>
                        <entry>pid</entry>
                        <entry>– идентификатор процесса расчетного модуля;</entry>
                      </row>
                      <row>
                        <entry>chid</entry>
                        <entry>– идентификатор канала обмена в ОСРВ версии QNX6 (в версии QNX4 –
                          параметр не используется);</entry>
                      </row>
                      <row>
                        <entry>coid</entry>
                        <entry>– идентификатор клиента, используемый в MsgSend для посылки сообщений
                          от диспетчера расчётному модулю (только для ОСРВ версии QNX 6, в версии
                          QNX4 параметр не используется);</entry>
                      </row>
                      <row>
                        <entry>din_vars_bytes</entry>
                        <entry>– размер области памяти динамических переменных, выделенных в общей
                          памяти расчётным модулем, байт. Необходим для работы отладочного
                          сервера;</entry>
                      </row>
                      <row>
                        <entry>alg_vars_bytes</entry>
                        <entry>– размер области памяти алгебраических переменных, выделенных в общей
                          памяти расчётным модулем, байт. Необходим для работы отладочного
                          сервера;</entry>
                      </row>
                      <row>
                        <entry>state_vars_bytes</entry>
                        <entry>– размер области памяти переменных состояния, выделенных в общей
                          памяти расчётным модулем, байт. Необходим для работы отладочного
                          сервера;</entry>
                      </row>
                      <row>
                        <entry>constants_bytes</entry>
                        <entry>– размер области памяти констант, выделенных в общей памяти расчётным
                          модулем, байт. Необходим для работы отладочного сервера;</entry>
                      </row>
                      <row>
                        <entry>number_extvars</entry>
                        <entry>– количество внешних сигналов;</entry>
                      </row>
                      <row>
                        <entry>flag_error</entry>
                        <entry>– признак ошибки диспетчера РМ, если эта переменная больше нуля,
                          значит в системе возникла ошибка (например произошло отключение расчётного
                          модуля или время вычисления расчётного модуля не укладывается в заданный
                          такт);</entry>
                      </row>
                      <row>
                        <entry>error_name</entry>
                        <entry>– описание ошибки – строка, размером не более 256 символов в формате
                          ASCII.</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
                <p>Область памяти /extvars_struct содержит описание всех внешних переменных,
                  выделенных при загрузке диспетчером и состоит из записей типа ext_var_info_record.
                  В поле index для каждой из структур при этом содержится байтовое смещение
                  переменной для единой области памяти хранящей значения внешних переменных (
                  /extvars_value ).</p>
                <p>Алгоритм поиска внешней переменной в расчётном модуле следующий:</p>
                <p>1) из /header получаем количество загруженных расчетных модулей;</p>
                <p>2) по имени алгоритма для заданного запущенного расчётного модуля производим
                  поиск по имени в области памяти /exemod_struct нужной структуры exemod_data,
                  которая описывает алгоритм. Именно поэтому имя алгоритма при запуске расчетного
                  модуля должно обязательно указываться;</p>
                <p>3) из структуры exemod_data получаем начальный индекс в массиве структур внешних
                  переменных для расчетного модуля, находим начало описания внешних переменных
                  расчетного модуля в области памяти /extvars_struct;</p>
                <p>4) последовательно считываем данные о смещениях ext_var_info_record.index внешних
                  переменных, хранящихся в общей области разделяемой памяти нужных расчетных модулей
                  (количество внешних переменных расчетного модуля определено).</p>
                <p>Пример как производить поиск внешней переменной для осуществления перепаковки
                  данных или иной обработке данных, можно посмотреть в следующем разделе справки, а
                  также в исходных кодах расчётного модуля (calc\calcmain.c). Пример поиска внешней
                  переменной в области памяти по имени приведен в Приложении А.</p>
                <p>Схематично алгоритм поиска адреса внешней переменной при загрузке расчётного
                  модуля представлен на рисунке:</p>
                <p><image href="../rsp-images/rsp-2-3-ris-1.png" height="490" width="939"
                    id="image_wfv_51t_qy"/></p>
                <p>Общая область памяти /extvars_value, выделяется диспетчером при запуске расчётных
                  модулей и содержит в себе текущие значения для всех внешних переменных,
                  используемых по всех РМ. При загрузке каждый из РМ получает адреса нужных ему
                  внешних переменных в данной области памяти по вышеприведённому алгоритму.</p>
                <p>Кроме указанных выше областей памяти, выделяемых диспетчером расчётных модулей
                  перед загрузкой всех РМ, каждый из них при старте выделяет общие области памяти
                  под свои внутренние переменные. Внутренние переменные, в отличие от внешних, не
                  объединяются. Выделяемые области памяти – это рабочие массивы, в которых
                  последовательно расположены значения внутренних переменных, приём для разного
                  класса внутренних переменных выделяются разные области памяти:</p>
                <p>/din_vars_&lt;имя алгоритма указанное при запуске></p>
                <p>/alg_vars_&lt;имя алгоритма указанное при запуске></p>
                <p>/state_vars_vars_&lt;имя алгоритма указанное при запуске></p>
                <p>/constants_vars_&lt;имя алгоритма указанное при запуске></p>
    
  </body>
</topic>
