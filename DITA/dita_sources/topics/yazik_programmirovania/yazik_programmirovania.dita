<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_v4b_tyc_rf">
  <title>Общие сведения о языке программирования</title>
  <body>
    <p>Язык программирования предназначен для создания программ, описывающих функционирование
      типового блока «Язык программирования», а также для задания глобальных параметров и переменных
      во вкладке «Параметры». </p>
    <p>При помощи языка программирования во вкладке «Параметры» можно написать программу, которая
      может производить по мере расчета манипуляции с объектами схемы, а также запрограммировать
      видеокадры. </p>
    <p>Вкладка «Параметры» есть на каждом уровне вложенности субмоделей и у каждой субмодели может
      быть записана своя локальная программа (скрипт) в этой вкладке.</p>
    <p>Идентификаторы (имена констант, переменных, меток, функций и процедур) могут содержать буквы
      латинского и русского алфавита, знак подчеркивания «_» и цифры. Идентификатор должен
      начинаться с буквы или знака подчеркивания и может иметь произвольную длину. Не допускается
      использовать в качестве идентификаторов ключевые слова (эти слова автоматически выделяются при
      вводе полужирным шрифтом). Строчные и прописные буквы по умолчанию в идентификаторах не
      различаются (t и T – одинаковые идентификаторы). Данные параметр можно изменить в настройках
      системы.</p>
    <p>Программа состоит из деклараций и операторов. Декларации начинаются с ключевых слов и
      инициализируют соответствующие переменные и константы:</p>
    <p><codeph>сonst </codeph>– константы;</p>
    <p><codeph>var </codeph>– алгебраические переменные;</p>
    <p><codeph>init </codeph>– динамические (дифференциальные) переменные;</p>
    <p><codeph>input </codeph>– входные переменные блока;</p>
    <p><codeph>output </codeph>– выходные переменные блока.</p>
    <p>После ключевого слова перечисляются через запятую имена переменных либо констант с возможным
      заданием начальных значений, например:</p>
    <p><codeph>const a=5.3,b=1.2e-4,c=10,y0=a*b/c;</codeph></p>
    <p><codeph>var x1,v=b;</codeph></p>
    <p><codeph>output y=y0;</codeph> </p>
    <p>Если начальное значение не задано, то оно принимается равным 0. Разделителем деклараций и
      операторов является точка с запятой (;).</p>
    <p>В декларациях обязательно должны быть описаны входные, выходные и динамические
      (дифференциальные) переменные. Остальные переменные могут быть заданы автоматически в
      соответствии с выражением, которое присваивается переменной. Рекомендуется (но не обязательно)
      помещать декларации в начало программы. Переменную или константу можно использовать только
      после того, как она описана в декларации или задана в операторе присваивания. </p>
    <p>Доступны также следующие системные переменные:</p>
    <table id="table_a1p_vmy_nw">
      <tgroup cols="3">
        <colspec colnum="1" colname="col1"/>
        <colspec colnum="2" colname="col2"/>
        <colspec colnum="3" colname="col3"/>
        <tbody>
          <row>
            <entry>Переменная </entry>
            <entry>Тип данных</entry>
            <entry>Назначение</entry>
          </row>
          <row>
            <entry>time</entry>
            <entry>Вещественное (double)</entry>
            <entry>Модельное время</entry>
          </row>
          <row>
            <entry>stepsize</entry>
            <entry>Вещественное (double)</entry>
            <entry>Шаг интегрирования</entry>
          </row>
          <row>
            <entry>goodstep</entry>
            <entry>Двоичное (Boolean)</entry>
            <entry>Флаг «хорошего» шага</entry>
          </row>
          <row>
            <entry>getderi</entry>
            <entry>Двоичное (Boolean)</entry>
            <entry>Флаг вычисления значений производных</entry>
          </row>
          <row>
            <entry>setstepflag</entry>
            <entry>Двоичное (Boolean)</entry>
            <entry>Флаг принудительного присвоения шага</entry>
          </row>
          <row>
            <entry>newstepvalue</entry>
            <entry>Вещественное (double)</entry>
            <entry>Принудительное значение шага при setstepflag = 1</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>Программа может содержать комментарии, заключенные в фигурные скобки:</p>
    <p>
      <codeblock>{текст комментария}</codeblock></p>
    <p> либо в виде:</p>
    <p><codeblock>//текст комментария до конца строки.</codeblock></p>
    <p>Приведем несколько простых примеров программ для блока «Язык программирования».</p>
    <section><title>Пример 1.</title>
    <p>Выходная переменная блока – максимальное значение из двух входных переменных.</p>
      <codeblock>input u1,u2;
if u1>u2 then y=u1 else y=u2;
output y;</codeblock>
    <p>Можно упростить эту программу, используя функцию <codeph>max</codeph> языка, тогда оператор вычисления
      выходной переменной запишется в виде <codeph>y=max(u1,u2);</codeph></p></section>
    <section><title>Пример 2.</title>
    <p>Выходная переменная запоминает максимальное значение входной переменной.</p>
      <codeblock>input u;
if time=0 then y=u else
if goodstep then y=max(y,u);
output y;      </codeblock>
    <p>Значение <codeph>time=0</codeph> соответствует начальному моменту модельного времени. Переменная y практически
      задает состояние блока. Расчет таких переменных рекомендуется выполнять только на хорошем
      шаге, когда булевская переменная <codeph>goodstep</codeph> равна 1. В противном случае (при <codeph>goodstep=0</codeph>)
      переменная <codeph>u</codeph> может быть вычислена, например, на промежуточной итерации решения алгебраических
      уравнений, в результате чего значение переменной <codeph>y</codeph> будет неверным.</p></section>
    <section><title>Пример 3.</title>
    <p>Блок вычисляет время переходного процесса, т.е. время, в течение которого абсолютное
        значение входной переменной <codeph>z</codeph> уменьшается до <codeph>z0</codeph> и в
        дальнейшем не превышает этой величины.</p>
      <codeblock>const z0=0.05; 
input z;
output T=0; //0 – начальное значение
if goodstep and (abs(z)>z0) then T=time;     </codeblock></section>
    <section><title>Пример 4.</title>
    <p>Блок описывает уравнение Ван-дер-Поля.</p>
      <codeblock>const mu=1e6;
init x1=2,x2=0;
x1’=x2;  //дифференциальные уравнения
x2’=mu*((1-x1^2)*x2-x1); 
output x1,x2;      </codeblock>
    <p>Здесь операторы присваивания задают дифференциальные уравнения и определяют новые переменные
      <codeph>x1’,x2’</codeph> (производные соответствующих переменных), которые, как и другие переменные, могут быть
      использованы в математических выражениях. </p>
 </section>
    <section><title>Пример 5.</title>
    <p>Счетчик числа поступающих на вход импульсов.</p>
      <codeblock>input u;        
output Nimp=0;        
var u0=1;        
if goodstep and (u0&lt;=0) and (u>0) then        
begin Nimp=Nimp+1; u0=u end;      </codeblock>
    <p>Импульсы считаются по переднему фронту, т.е. моменту модельного времени, когда входная
      переменная возрастает и становится положительной. </p></section>
    <p> В следующих подразделах справки приведены описания ключевых слов и функций языка
      программирования. Символами <codeph>&lt;</codeph> и <codeph>></codeph> помечены обязательные идентификаторы. Символами <codeph>{</codeph> и <codeph>}</codeph>
      помечены дополнительные идентификаторы.</p>
  </body>
</topic>
