<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_v4b_tyc_rf">
<title>function</title>
<shortdesc>Задание пользовательских функций.</shortdesc>
<body>
<section><title>Синтаксис:</title><codeblock><kword>function</kword> &lt;Имя функции>(&lt;имя входной переменной 1>{:&lt;тип входной переменной 1>}{=&lt;инициирующее выражение 1>}{,<kword>out</kword>&lt;имя выходной переменной> {:&lt;тип выходной переменной>}{=инициирующее выражение>}}){:&lt;тип выходного значения>}
&lt;операции выполняемые при вызове функции>
<kword>end</kword>;</codeblock></section>
<section><title>Описание:</title>
<p>Задание новой пользовательской функции. Значение функции может быть не присвоено. Выходные переменные декларируются словом <codeph>out</codeph> – в такую переменную функция записывает значение.  Если тип значения функции не указан, то он определяется автоматически по типу выражения, где присваивается выходное значение функции. Вместо <codeph>function</codeph> можно использовать <codeph>procedure</codeph>. Если типы параметров функции не указаны, то при создании кода функции типы принимаются как у операндов при соответствующем вызове. </p></section>
<section><title>Пример1:</title>
<codeblock><funcname>function</funcname> PolyF(A,B)
PolyF = A*A + B*B;
<kword>end</kword>;</codeblock></section>
<p>В примере 1, если при вызове операнды A и B будут действительными числами, то результат тоже будет действительным числом. Если A и B будут векторами, то результат будет вектором.</p>
<p>В тексте программы примера 2, одна и та же функция может быть по-разному определена несколько раз, а также переопределена под другим именем в соответствии со следующим форматом:</p>
<p><kword>function</kword>&lt;имя функции>=&lt;имя ранее определённой функции></p>
 <section><title>Пример2:</title><codeblock>
 <funcname>function</funcname> PolyF(A,B)
 PolyF = A*A + B*B;
 <kword>end</kword>;</codeblock></section>
 <section><title>Пример2:</title>
 <codeblock><funcname>function</funcname> SumQ(A,out R:<rword>integer</rword>):<rword>complex</rword>
<comment>//Присваивание значений функции</comment>   
SumQ =<funcname>sqr</funcname>(A);
<comment>//Присваивание выходной переменной</comment>
R = <funcname>round</funcname>(<rword>real</rword>(SumQ))
<kword>end</kword>;
<comment>//Переопределение SumQ как FSum</comment>
<funcname>function</funcname> Fsum=SumQ;</codeblock></section>
<p>Функции и процедуры допускают также рекурсивный вызов, пример которого представлен в скрипте примера 3.</p>
<section><title>Пример3:</title><codeblock>procedure <funcname>ScanCurrentContainer</funcname>(contid: <rword>integer</rword>)
<kword>for</kword>(i=1,<funcname>getobjcount</funcname>(contid) <kword>begin</kword>
<kword>var</kword> id,imagecontid,submodelid: <rword>integer</rword>;
<comment>//Получаем идентификатор</comment>
id = <funcname>getobj</funcname>(contid,i);
<comment>//Получаем выводим сообщение</comment>
<funcname>seterrorstr</funcname>(getobjname(id)+":"+ <funcname>getobjclassname</funcname>(id),0);
<comment>//Получаем идентификатор контейнера изображения</comment>
imagecontid = <funcname>getobjcontainer</funcname>(id);
<comment>//Рекурсивный вызов функции, если у неё есть вложенный контейнер</comment>
<kword>if</kword> <funcname>imagecontid</funcname>&lt;0 <kword>then</kword> <funcname>ScanCurrentContainer</funcname>(imagecontid);
<comment>//Обход содержимого субмоделей</comment>
submodelid = <funcname>getsubmodelid</funcname>(id);
<kword>if</kword> submodelid &lt; 0 <kword>then</kword> <funcname>ScanCurrentContainer</funcname>(submodelid); 
<kword>end</kword>;
<kword>end</kword>;
<kword>initialization </kword>
<funcname>ScanCurrentContainer</funcname>(getmainpageid)
<kword>end</kword>; </codeblock>
</section>
<p>После запуска скрипта примера 3, в окне сообщений выводится информация, содержащая имена и типы всех блоков проекта. При этом обход начинается с главной страницы и если блок содержит вложенные контейнеры, то процедура вызывает сама себя, находясь во вложенных контейнерах.</p>
<p>Язык программирования позволяет создавать также библиотеки функций в виде текстовых файлов. Это может быть сделано при помощи ключевого слова <kword>include</kword>. Оно позволяет загрузить фрагмент программы из текстового файла. </p>
  </body>
</topic>
